{"version":3,"file":"pocketbase.cjs.js","sources":["../src/ClientResponseError.ts","../src/stores/utils/jwt.ts","../src/stores/utils/cookie.ts","../src/models/utils/BaseModel.ts","../src/models/Record.ts","../src/models/Admin.ts","../src/stores/LocalAuthStore.ts","../src/stores/BaseAuthStore.ts","../src/models/utils/ListResult.ts","../src/services/utils/BaseService.ts","../src/services/utils/CrudService.ts","../src/services/utils/BaseCrudService.ts","../src/models/utils/SchemaField.ts","../src/models/View.ts","../src/models/ExternalAuth.ts","../src/models/Collection.ts","../src/models/ViewRecord.ts","../src/models/LogRequest.ts","../src/services/ViewService.ts","../src/services/SettingsService.ts","../src/services/AdminService.ts","../src/services/RecordService.ts","../src/services/CollectionService.ts","../src/services/LogService.ts","../src/services/RealtimeService.ts","../src/services/HealthService.ts","../src/Client.ts"],"sourcesContent":["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport default class ClientResponseError extends Error {\n    url: string                = '';\n    status: number             = 0;\n    data: {[key: string]: any} = {};\n    isAbort:  boolean          = false;\n    originalError: any         = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (!(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (errData !== null && typeof errData === 'object') {\n            this.url    = typeof errData.url === 'string' ? errData.url : '';\n            this.status = typeof errData.status === 'number' ? errData.status : 0;\n            this.data   = errData.data !== null && typeof errData.data === 'object' ? errData.data : {};\n        }\n\n        if (typeof DOMException !== 'undefined' && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.data?.message;\n        if (!this.message) {\n            this.message = this.isAbort ?\n                'The request was autocancelled. More info you could find in https://github.com/pocketbase/js-sdk#auto-cancellation.' :\n                'Something went wrong while processing your request.';\n        }\n    }\n\n    // Make a POJO's copy of the current error class instance.\n    // @see https://github.com/vuex-orm/vuex-orm/issues/255\n    toJSON () {\n        return { ...this };\n    }\n}\n","let atobPolyfill: Function;\nif (typeof atob === 'function') {\n    atobPolyfill = atob\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n                // and if not first of each 4 characters,\n                // convert the first 8 bits to one ascii character\n                bc++ % 4) ?\n            (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n            0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(atobPolyfill(token.split('.')[1]).split('').map(function (c: string) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(''));\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {\n        }\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || (payload.exp - expirationThreshold) > (Date.now() / 1000))\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions{\n    decode?: (val: string) => string,\n}\n\n/**\n* Parses the given cookie header string into an object\n* The object has the various cookies as keys(names) => values\n*/\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any }  {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== 'string') {\n        return result;\n    }\n\n    const opt    = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf('=', index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(';', index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(';', eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n};\n\nexport interface SerializeOptions{\n    encode?:   (val: string | number | boolean) => string,\n    maxAge?:   number,\n    domain?:   string,\n    path?:     string,\n    expires?:  Date,\n    httpOnly?: boolean,\n    secure?:   boolean,\n    priority?: string,\n    sameSite?: boolean|string,\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(name: string, val: string, options?: SerializeOptions): string {\n    const opt    = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError('argument name is invalid');\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError('argument val is invalid');\n    }\n\n    let result = name + '=' + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError('option maxAge is invalid');\n        }\n\n        result += '; Max-Age=' + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError('option domain is invalid');\n        }\n\n        result += '; Domain=' + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError('option path is invalid');\n        }\n\n        result += '; Path=' + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError('option expires is invalid');\n        }\n\n        result += '; Expires=' + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += '; HttpOnly';\n    }\n\n    if (opt.secure) {\n        result += '; Secure';\n    }\n\n    if (opt.priority) {\n        const priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case 'low':\n                result += '; Priority=Low';\n                break;\n            case 'medium':\n                result += '; Priority=Medium';\n                break;\n            case 'high':\n                result += '; Priority=High';\n                break;\n            default:\n                throw new TypeError('option priority is invalid');\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += '; SameSite=Strict';\n                break;\n            case 'lax':\n                result += '; SameSite=Lax';\n                break;\n            case 'strict':\n                result += '; SameSite=Strict';\n                break;\n            case 'none':\n                result += '; SameSite=None';\n                break;\n            default:\n                throw new TypeError('option sameSite is invalid');\n        }\n    }\n\n    return result;\n};\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf('%') !== -1\n        ? decodeURIComponent(val)\n        : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return (\n        Object.prototype.toString.call(val) === '[object Date]' ||\n        val instanceof Date\n    );\n}\n","export default abstract class BaseModel {\n    [key: string]: any,\n\n    id!:      string;\n    created!: string;\n    updated!: string;\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the current model.\n     */\n    load(data: { [key: string]: any }) {\n        for (const [key, value] of Object.entries(data)) {\n            this[key] = value;\n        }\n\n        // normalize known fields\n        this.id      = typeof data.id      !== 'undefined' ? data.id      : '';\n        this.created = typeof data.created !== 'undefined' ? data.created : '';\n        this.updated = typeof data.updated !== 'undefined' ? data.updated : '';\n    }\n\n    /**\n     * Returns whether the current loaded data represent a stored db record.\n     */\n    get isNew(): boolean {\n        return !this.id;\n    }\n\n    /**\n     * Creates a deep clone of the current model.\n     */\n    clone(): BaseModel {\n        const clone = typeof structuredClone === 'function' ?\n            structuredClone(this) : JSON.parse(JSON.stringify(this));\n\n        return new (this.constructor as any)(clone);\n    }\n\n    /**\n     * Exports all model properties as a new plain object.\n     */\n    export(): { [key: string]: any } {\n        return Object.assign({}, this);\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Record extends BaseModel {\n    collectionId!:   string;\n    collectionName!: string;\n    expand!:         {[key: string]: Record|Array<Record>};\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        // normalize common fields\n        this.collectionId   = typeof data.collectionId   === 'string' ? data.collectionId   : '';\n        this.collectionName = typeof data.collectionName === 'string' ? data.collectionName : '';\n\n        // normalize expand items\n        this.loadExpand(data.expand);\n    }\n\n    /**\n     * Loads the provided expand items and recursively normalizes each\n     * item to a `Record|Array<Record>`.\n     */\n    private loadExpand(expand: { [key: string]: any }) {\n        expand = expand || {};\n        this.expand = {};\n\n        for (const key in expand) {\n            if (Array.isArray(expand[key])) {\n                this.expand[key] = expand[key].map((data: any) => new Record(data || {}));\n            } else {\n                this.expand[key] = new Record(expand[key] || {});\n            }\n        }\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Admin extends BaseModel {\n    avatar!: number;\n    email!:  string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.avatar = typeof data.avatar === 'number' ? data.avatar : 0;\n        this.email  = typeof data.email  === 'string' ? data.email  : '';\n    }\n}\n","import BaseAuthStore from '@/stores/BaseAuthStore';\nimport Record        from '@/models/Record';\nimport Admin         from '@/models/Admin';\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport default class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): Record|Admin|null {\n        const data = this._storageGet(this.storageKey) || {};\n\n        if (\n            data === null ||\n            typeof data !== 'object' ||\n            data.model === null ||\n            typeof data.model !== 'object'\n        ) {\n            return null;\n        }\n\n        // admins don't have `collectionId` prop\n        if (typeof data.model?.collectionId === 'undefined') {\n            return new Admin(data.model);\n        }\n\n        return new Record(data.model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model: Record|Admin|null) {\n        this._storageSet(this.storageKey, {\n            'token': token,\n            'model': model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || '';\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) { // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== 'string') {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n}\n","import { cookieParse, cookieSerialize, SerializeOptions } from '@/stores/utils/cookie';\nimport { isTokenExpired, getTokenPayload } from '@/stores/utils/jwt';\nimport Record  from '@/models/Record';\nimport Admin from '@/models/Admin';\n\nexport type OnStoreChangeFunc = (token: string, model: Record|Admin|null) => void;\n\nconst defaultCookieKey = 'pb_auth';\n\n/**\n * Base AuthStore class that is intended to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport default abstract class BaseAuthStore {\n    protected baseToken: string = '';\n    protected baseModel: Record|Admin|null = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): Record|Admin|null {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model: Record|Admin|null): void {\n        this.baseToken = token || '';\n\n        // normalize the model instance\n        if (model !== null && typeof model === 'object') {\n            this.baseModel = typeof (model as any).collectionId !== 'undefined' ?\n                new Record(model) : new Admin(model);\n        } else {\n            this.baseModel = null;\n        }\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = '';\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || '')[key] || '';\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== 'object' || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || '', data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure:   true,\n            sameSite: true,\n            httpOnly: true,\n            path:     \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date('1970-01-01');\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            model: this.model?.export() || null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength = typeof Blob !== 'undefined' ?\n            (new Blob([result])).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.model && resultLength > 4096) {\n            rawData.model = {id: rawData?.model?.id, email: rawData?.model?.email};\n            if (this.model instanceof Record) {\n                rawData.model.username     = this.model.username;\n                rawData.model.verified     = this.model.verified;\n                rawData.model.collectionId = this.model.collectionId;\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.model);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i];    // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        }\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n","import BaseModel from './BaseModel';\n\nexport default class ListResult<M = BaseModel> {\n    page!:       number;\n    perPage!:    number;\n    totalItems!: number;\n    totalPages!: number;\n    items!:      Array<M>;\n\n    constructor(\n        page: number,\n        perPage: number,\n        totalItems: number,\n        totalPages: number,\n        items: Array<M>,\n    ) {\n        this.page       = page > 0 ? page : 1;\n        this.perPage    = perPage >= 0 ? perPage : 0;\n        this.totalItems = totalItems >= 0 ? totalItems : 0;\n        this.totalPages = totalPages >= 0 ? totalPages : 0;\n        this.items      = items || [];\n    }\n}\n","import Client from '@/Client';\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport default abstract class BaseService {\n    readonly client: Client\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import ListResult      from '@/models/utils/ListResult';\nimport BaseModel       from '@/models/utils/BaseModel';\nimport BaseCrudService from '@/services/utils/BaseCrudService';\nimport {\n    BaseQueryParams,\n    ListQueryParams\n} from '@/services/utils/QueryParams';\n\nexport default abstract class CrudService<M extends BaseModel> extends BaseCrudService<M> {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getFullList<T = M>(batch = 200, queryParams: ListQueryParams = {}): Promise<Array<T>> {\n        return this._getFullList<T>(this.baseCrudPath, batch, queryParams);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getList<T = M>(page = 1, perPage = 30, queryParams: ListQueryParams = {}): Promise<ListResult<T>> {\n        return this._getList<T>(this.baseCrudPath, page, perPage, queryParams);\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter })` and returns the\n     * first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     */\n    getFirstListItem<T = M>(filter: string, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this._getFirstListItem<T>(this.baseCrudPath, filter, queryParams);\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getOne<T = M>(id: string, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this._getOne<T>(this.baseCrudPath, id, queryParams);\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    create<T = M>(bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this._create<T>(this.baseCrudPath, bodyParams, queryParams);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    update<T = M>(id: string, bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this._update<T>(this.baseCrudPath, id, bodyParams, queryParams);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(id: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return this._delete(this.baseCrudPath, id, queryParams);\n    }\n}\n","import BaseModel           from '@/models/utils/BaseModel';\nimport ListResult          from '@/models/utils/ListResult';\nimport BaseService         from '@/services/utils/BaseService';\nimport ClientResponseError from '@/ClientResponseError';\nimport {\n    BaseQueryParams,\n    ListQueryParams\n} from '@/services/utils/QueryParams';\n\n// @todo since there is no longer need of SubCrudService consider merging with CrudService in v0.9+\nexport default abstract class BaseCrudService<M extends BaseModel> extends BaseService {\n    /**\n     * Response data decoder.\n     */\n    abstract decode(data: { [key: string]: any }): M\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(basePath: string, batchSize = 100, queryParams: ListQueryParams = {}): Promise<Array<T>> {\n        var result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this._getList(basePath, page, batchSize, queryParams).then((list) => {\n                const castedList = (list as any as ListResult<T>);\n                const items = castedList.items;\n                const totalItems = castedList.totalItems;\n\n                result = result.concat(items);\n\n                if (items.length && totalItems > result.length) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    protected _getList<T = M>(basePath: string, page = 1, perPage = 30, queryParams: ListQueryParams = {}): Promise<ListResult<T>> {\n        queryParams = Object.assign({\n            'page': page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send(basePath, {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<T> = [];\n            if (responseData?.items) {\n                responseData.items = responseData.items || [];\n                for (const item of responseData.items) {\n                    items.push(this.decode(item) as any as T);\n                }\n            }\n\n            return new ListResult<T>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    protected _getOne<T = M>(basePath: string, id: string, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Returns the first found item by a list filter.\n     *\n     * Internally it calls `_getList(basePath, 1, 1, { filter })` and returns its\n     * first item.\n     *\n     * For consistency with `_getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     */\n    protected _getFirstListItem<T = M>(basePath: string, filter: string, queryParams: BaseQueryParams = {}): Promise<T> {\n        queryParams = Object.assign({\n            'filter': filter,\n            '$cancelKey': 'one_by_filter_' + basePath + \"_\" + filter,\n        }, queryParams);\n\n        return this._getList<T>(basePath, 1, 1, queryParams)\n            .then((result) => {\n                if (!result?.items?.length) {\n                    throw new ClientResponseError({\n                        status: 404,\n                        data: {\n                            code: 404,\n                            message: \"The requested resource wasn't found.\",\n                            data: {},\n                        },\n                    });\n                }\n\n                return result.items[0];\n            });\n    }\n\n    /**\n     * Creates a new item.\n     */\n    protected _create<T = M>(basePath: string, bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this.client.send(basePath, {\n            'method': 'POST',\n            'params': queryParams,\n            'body': bodyParams,\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    protected _update<T = M>(basePath: string, id: string, bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body': bodyParams,\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    protected _delete(basePath: string, id: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n","export default class SchemaField {\n    id!:       string;\n    name!:     string;\n    type!:     string;\n    system!:   boolean;\n    required!: boolean;\n    unique!:   boolean;\n    options!:  { [key: string]: any };\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the field.\n     */\n    load(data: { [key: string]: any }) {\n        this.id       = typeof data.id !== 'undefined' ? data.id : '';\n        this.name     = typeof data.name !== 'undefined' ? data.name : '';\n        this.type     = typeof data.type !== 'undefined' ? data.type : 'text';\n        this.system   = !!data.system;\n        this.required = !!data.required;\n        this.unique   = !!data.unique;\n        this.options  = typeof data.options === 'object' && data.options !== null ? data.options : {};\n    }\n}\n","import BaseModel   from '@/models/utils/BaseModel';\nimport SchemaField from '@/models/utils/SchemaField';\n\nexport default class View extends BaseModel {\n    name!:       string;\n    schema!:     Array<SchemaField>;\n    listRule!:   null|string;\n    sql!: string\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.name  = typeof data.name === 'string' ? data.name : '';\n\n        // rules\n        this.listRule = typeof data.listRule   === 'string' ? data.listRule   : null;\n\n        // sql \n        this.sql = typeof data.sql === 'string' ? data.sql : '';\n\n        // schema\n        data.schema = Array.isArray(data.schema) ? data.schema : [];\n        this.schema = [];\n        for (let field of data.schema) {\n            this.schema.push(new SchemaField(field));\n        }\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class ExternalAuth extends BaseModel {\n    recordId!:     string;\n    collectionId!: string;\n    provider!:     string;\n    providerId!:   string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.recordId     = typeof data.recordId     === 'string' ? data.recordId     : '';\n        this.collectionId = typeof data.collectionId === 'string' ? data.collectionId : '';\n        this.provider     = typeof data.provider     === 'string' ? data.provider     : '';\n        this.providerId   = typeof data.providerId   === 'string' ? data.providerId   : '';\n    }\n}\n","import BaseModel   from '@/models/utils/BaseModel';\nimport SchemaField from '@/models/utils/SchemaField';\n\nexport default class Collection extends BaseModel {\n    name!:       string;\n    type!:       string;\n    schema!:     Array<SchemaField>;\n    system!:     boolean;\n    listRule!:   null|string;\n    viewRule!:   null|string;\n    createRule!: null|string;\n    updateRule!: null|string;\n    deleteRule!: null|string;\n    options!:    {[key:string]: any};\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.system    = !!data.system;\n        this.name      = typeof data.name    === 'string'    ? data.name    : '';\n        this.type      = typeof data.type    === 'string'    ? data.type    : 'base';\n        this.options   = typeof data.options !== 'undefined' ? data.options : {};\n\n        // rules\n        this.listRule   = typeof data.listRule   === 'string' ? data.listRule   : null;\n        this.viewRule   = typeof data.viewRule   === 'string' ? data.viewRule   : null;\n        this.createRule = typeof data.createRule === 'string' ? data.createRule : null;\n        this.updateRule = typeof data.updateRule === 'string' ? data.updateRule : null;\n        this.deleteRule = typeof data.deleteRule === 'string' ? data.deleteRule : null;\n\n        // schema\n        data.schema = Array.isArray(data.schema) ? data.schema : [];\n        this.schema = [];\n        for (let field of data.schema) {\n            this.schema.push(new SchemaField(field));\n        }\n    }\n\n    /**\n     * Checks if the current model is \"base\" collection.\n     */\n    get isBase(): boolean {\n        return this.type === 'base';\n    }\n\n    /**\n     * Checks if the current model is \"auth\" collection.\n     */\n    get isAuth(): boolean {\n        return this.type === 'auth';\n    }\n\n    /**\n     * Checks if the current model is \"single\" collection.\n     */\n    get isSingle(): boolean {\n        return this.type === 'single';\n    }\n}\n","\nexport default class ViewRecord {\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    [key: string]: any,\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        for (const [key, value] of Object.entries(data)) {\n            this[key] = value;\n        }\n    }\n    clone(): ViewRecord {\n        return new (this.constructor as any)(JSON.parse(JSON.stringify(this)));\n    }\n\n    /**\n     * Exports all model properties as a new plain object.\n     */\n    export(): { [key: string]: any } {\n        return Object.assign({}, this);\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class LogRequest extends BaseModel {\n    url!:       string;\n    method!:    string;\n    status!:    number;\n    auth!:      string;\n    remoteIp!:  string;\n    userIp!:    string;\n    referer!:   string;\n    userAgent!: string;\n    meta!:      { [key: string]: any };\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        // fallback to the ip field for backward compatibility\n        data.remoteIp = data.remoteIp || data.ip;\n\n        this.url       = typeof data.url       === 'string' ? data.url       : '';\n        this.method    = typeof data.method    === 'string' ? data.method    : 'GET';\n        this.status    = typeof data.status    === 'number' ? data.status    : 200;\n        this.auth      = typeof data.auth      === 'string' ? data.auth      : 'guest';\n        this.remoteIp  = typeof data.remoteIp  === 'string' ? data.remoteIp  : '';\n        this.userIp    = typeof data.userIp    === 'string' ? data.userIp    : '';\n        this.referer   = typeof data.referer   === 'string' ? data.referer   : '';\n        this.userAgent = typeof data.userAgent === 'string' ? data.userAgent : '';\n        this.meta      = typeof data.meta === 'object' && data.meta !== null ? data.meta : {};\n    }\n}\n","\nimport CrudService from '@/services/utils/CrudService';\nimport View  from '@/models/View';\nimport { ViewRecord } from '..';\n\nexport default class Views extends CrudService<View> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): View {\n        return new View(data);\n    }\n\n    /**\n     * @inheritdoc */\n\n    get baseCrudPath(): string {\n        return '/api/records';\n    }\n\n    getRecordsFullList(viewName: string, batchSize = 100, queryParams = {}): Promise<Array<ViewRecord>> {\n        const basePath= `${this.baseCrudPath}/${viewName}/records`\n        var result: Array<ViewRecord> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getRecordsList(basePath, page, batchSize, queryParams).then((list) => {\n                console.log(list);\n                \n                const castedList = (list as ViewRecordListResult);\n                const items = castedList.items;\n                const totalItems = castedList.totalItems;\n\n                result = result.concat(items);\n\n                if (items.length && totalItems > result.length) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    getRecordsList(viewName: string, page = 1, perPage = 30, queryParams = {}): Promise<ViewRecordListResult> {\n        const basePath= `${this.baseCrudPath}/${viewName}/records`\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send(basePath, {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<ViewRecord> = [];\n            if (responseData?.items) {\n                responseData.items = responseData.items || [];\n                for (const item of responseData.items) {\n                    items.push(new ViewRecord(item));\n                }\n            }\n\n            return new ViewRecordListResult(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n}\n\n class ViewRecordListResult{\n    page!: number;\n    perPage!: number;\n    totalItems!: number;\n    totalPages!: number;\n    items!: Array<ViewRecord>;\n\n    constructor(\n        page: number,\n        perPage: number,\n        totalItems: number,\n        totalPages: number,\n        items: Array<ViewRecord>,\n    ) {\n        this.page = page > 0 ? page : 1;\n        this.perPage = perPage >= 0 ? perPage : 0;\n        this.totalItems = totalItems >= 0 ? totalItems : 0;\n        this.totalPages = totalPages >= 0 ? totalPages : 0;\n        this.items = items || [];\n    }\n}\n","import BaseService         from '@/services/utils/BaseService';\nimport { BaseQueryParams } from '@/services/utils/QueryParams';\n\nexport default class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     */\n    getAll(queryParams: BaseQueryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Bulk updates app settings.\n     */\n    update(bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Performs a S3 storage connection test.\n     */\n    testS3(queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return this.client.send('/api/settings/test/s3', {\n            'method': 'POST',\n            'params': queryParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     */\n    testEmail(toEmail: string, emailTemplate: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        const bodyParams = {\n            'email':    toEmail,\n            'template': emailTemplate,\n        };\n\n        return this.client.send('/api/settings/test/email', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n}\n","import Admin               from '@/models/Admin';\nimport CrudService         from '@/services/utils/CrudService';\nimport { BaseQueryParams } from '@/services/utils/QueryParams';\n\nexport interface AdminAuthResponse {\n    [key: string]: any;\n\n    token: string;\n    admin: Admin;\n}\n\nexport default class AdminService extends CrudService<Admin> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Admin {\n        return new Admin(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/admins';\n    }\n\n    // ---------------------------------------------------------------\n    // Post update/delete AuthStore sync\n    // ---------------------------------------------------------------\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = Admin>(id: string, bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return super.update<Admin>(id, bodyParams, queryParams).then((item) => {\n            // update the store state if the updated item id matches with the stored model\n            if (\n                this.client.authStore.model &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' && // is not record auth\n                this.client.authStore.model?.id === item?.id\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return super.delete(id, queryParams).then((success) => {\n            // clear the store state if the deleted item id matches with the stored model\n            if (\n                success &&\n                this.client.authStore.model &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' && // is not record auth\n                this.client.authStore.model?.id === id\n            ) {\n                this.client.authStore.clear();\n            }\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'admin': admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account with its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authWithPassword(\n        email: string,\n        password: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<AdminAuthResponse> {\n        bodyParams = Object.assign({\n            'identity': email,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/auth-with-password', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authRefresh(bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<AdminAuthResponse> {\n        return this.client.send(this.baseCrudPath + '/auth-refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n}\n","import Client              from '@/Client';\nimport Record              from '@/models/Record';\nimport ExternalAuth        from '@/models/ExternalAuth';\nimport ListResult          from '@/models/utils/ListResult';\nimport CrudService         from '@/services/utils/CrudService';\nimport { UnsubscribeFunc } from '@/services/RealtimeService';\nimport {\n    BaseQueryParams,\n    RecordQueryParams,\n    RecordListQueryParams,\n} from '@/services/utils/QueryParams';\n\nexport interface RecordAuthResponse<T = Record> {\n    record: T;\n    token:  string;\n    meta?:  {[key: string]: any};\n}\n\nexport interface AuthProviderInfo {\n    name:                string;\n    state:               string;\n    codeVerifier:        string;\n    codeChallenge:       string;\n    codeChallengeMethod: string;\n    authUrl:             string;\n}\n\nexport interface AuthMethodsList {\n    usernamePassword: boolean;\n    emailPassword:    boolean;\n    authProviders:    Array<AuthProviderInfo>;\n}\n\nexport interface RecordSubscription<T = Record> {\n    action: string;\n    record: T;\n}\n\nexport default class RecordService extends CrudService<Record> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    decode<T = Record>(data: { [key: string]: any }): T {\n        return new Record(data) as any as T;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + '/records';\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return '/api/collections/' + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * @deprecated Use subscribe(recordId, callback) instead.\n     *\n     * Subscribe to the realtime changes of a single record in the collection.\n     */\n    async subscribeOne<T = Record>(recordId: string, callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc> {\n        console.warn(\"PocketBase: subscribeOne(recordId, callback) is deprecated. Please replace it with subscribe(recordId, callback).\");\n        return this.client.realtime.subscribe(this.collectionIdOrName + \"/\" + recordId, callback);\n    }\n\n    /**\n     * @deprecated This form of subscribe is deprecated. Please use `subscribe(\"*\", callback)`.\n     */\n    async subscribe<T = Record>(callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc>\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = Record>(topic: string, callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc>\n\n    async subscribe<T = Record>(\n        topicOrCallback: string|((data: RecordSubscription<T>) => void),\n        callback?: (data: RecordSubscription<T>) => void\n    ): Promise<UnsubscribeFunc> {\n        if (typeof topicOrCallback === 'function') {\n            console.warn(\"PocketBase: subscribe(callback) is deprecated. Please replace it with subscribe('*', callback).\");\n            return this.client.realtime.subscribe(this.collectionIdOrName, topicOrCallback);\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        if (topicOrCallback === \"\") {\n            throw new Error(\"Missing topic.\");\n        }\n\n        let topic = this.collectionIdOrName;\n        if (topicOrCallback !== \"*\") {\n            topic += ('/' + topicOrCallback);\n        }\n\n        return this.client.realtime.subscribe(topic, callback)\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe wildcard topic\n        if (topic === \"*\") {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName);\n        }\n\n        // unsubscribe recordId topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName + \"/\" + topic);\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    getFullList<T = Record>(batch = 200, queryParams: RecordListQueryParams = {}): Promise<Array<T>> {\n        return super.getFullList<T>(batch, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getList<T = Record>(page = 1, perPage = 30, queryParams: RecordListQueryParams = {}): Promise<ListResult<T>> {\n        return super.getList<T>(page, perPage, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFirstListItem<T = Record>(filter: string, queryParams: RecordListQueryParams = {}): Promise<T> {\n        return super.getFirstListItem<T>(filter, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getOne<T = Record>(id: string, queryParams: RecordQueryParams = {}): Promise<T> {\n        return super.getOne<T>(id, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    create<T = Record>(bodyParams = {}, queryParams: RecordQueryParams = {}): Promise<T> {\n        return super.create<T>(bodyParams, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = Record>(id: string, bodyParams = {}, queryParams: RecordQueryParams = {}): Promise<T> {\n        return super.update<Record>(id, bodyParams, queryParams).then((item) => {\n            if (\n                typeof this.client.authStore.model?.collectionId !== 'undefined' && // is record auth\n                this.client.authStore.model?.id === item?.id\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return super.delete(id, queryParams).then((success) => {\n            if (\n                success &&\n                typeof this.client.authStore.model?.collectionId !== 'undefined' && // is record auth\n                this.client.authStore.model?.id === id\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = Record>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token':  responseData?.token || '',\n            'record': record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     */\n    listAuthMethods(queryParams: BaseQueryParams = {}): Promise<AuthMethodsList> {\n        return this.client.send(this.baseCollectionPath + '/auth-methods', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            return Object.assign({}, responseData, {\n                // normalize common fields\n                'usernamePassword': !!responseData?.usernamePassword,\n                'emailPassword':    !!responseData?.emailPassword,\n                'authProviders':    Array.isArray(responseData?.authProviders) ? responseData?.authProviders : [],\n            });\n        });\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     */\n    authWithPassword<T = Record>(\n        usernameOrEmail: string,\n        password: string,\n        bodyParams = {},\n        queryParams: RecordQueryParams = {},\n    ): Promise<RecordAuthResponse<T>> {\n        bodyParams = Object.assign({\n            'identity': usernameOrEmail,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-password', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     */\n    authWithOAuth2<T = Record>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData = {},\n        bodyParams = {},\n        queryParams: RecordQueryParams = {},\n    ): Promise<RecordAuthResponse<T>> {\n        bodyParams = Object.assign({\n            'provider':     provider,\n            'code':         code,\n            'codeVerifier': codeVerifier,\n            'redirectUrl':  redirectUrl,\n            'createData':  createData,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-oauth2', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     */\n    authRefresh<T = Record>(bodyParams = {}, queryParams: RecordQueryParams = {}): Promise<RecordAuthResponse<T>> {\n        return this.client.send(this.baseCollectionPath + '/auth-refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams  = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     */\n    requestVerification(\n        email: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     */\n    confirmVerification(\n        verificationToken: string,\n        bodyParams  = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token': verificationToken,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     */\n    requestEmailChange(\n        newEmail: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'newEmail': newEmail,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     */\n    confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyParams  = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token': emailChangeToken,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Lists all linked external auth providers for the specified auth record.\n     */\n    listExternalAuths(\n        recordId: string,\n        queryParams: BaseQueryParams = {}\n    ): Promise<Array<ExternalAuth>> {\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => {\n            const items: Array<ExternalAuth> = [];\n\n            if (Array.isArray(responseData)) {\n                for (const item of responseData) {\n                    items.push(new ExternalAuth(item));\n                }\n            }\n\n            return items;\n        });\n    }\n\n    /**\n     * Unlink a single external auth provider from the specified auth record.\n     */\n    unlinkExternalAuth(\n        recordId: string,\n        provider: string,\n        queryParams: BaseQueryParams = {}\n    ): Promise<boolean> {\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths/' + encodeURIComponent(provider), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n","import Collection          from '@/models/Collection';\nimport CrudService         from '@/services/utils/CrudService';\nimport { BaseQueryParams } from '@/services/utils/QueryParams';\n\nexport default class CollectionService extends CrudService<Collection> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Collection {\n        return new Collection(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/collections';\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     */\n    async import(\n        collections: Array<Collection>,\n        deleteMissing: boolean = false,\n        queryParams: BaseQueryParams = {}\n    ): Promise<true> {\n        return this.client.send(this.baseCrudPath + '/import', {\n            'method': 'PUT',\n            'params': queryParams,\n            'body': {\n                'collections':  collections,\n                'deleteMissing': deleteMissing,\n            }\n        }).then(() => true);\n    }\n}\n","import LogRequest  from '@/models/LogRequest';\nimport ListResult  from '@/models/utils/ListResult';\nimport BaseService from '@/services/utils/BaseService';\nimport {\n    BaseQueryParams,\n    ListQueryParams,\n    LogStatsQueryParams,\n} from '@/services/utils/QueryParams';\n\nexport interface HourlyStats {\n    total: number;\n    date:  string;\n}\n\nexport default class LogService extends BaseService {\n    /**\n     * Returns paginated logged requests list.\n     */\n    getRequestsList(page = 1, perPage = 30, queryParams: ListQueryParams = {}): Promise<ListResult<LogRequest>> {\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send('/api/logs/requests', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<LogRequest> = [];\n            if (responseData?.items) {\n                responseData.items = responseData?.items || [];\n                for (const item of responseData.items) {\n                    items.push(new LogRequest(item));\n                }\n            }\n\n            return new ListResult<LogRequest>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns a single logged request by its id.\n     */\n    getRequest(id: string, queryParams: BaseQueryParams = {}): Promise<LogRequest> {\n        return this.client.send('/api/logs/requests/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => new LogRequest(responseData));\n    }\n\n    /**\n     * Returns request logs statistics.\n     */\n    getRequestsStats(queryParams: LogStatsQueryParams = {}): Promise<Array<HourlyStats>> {\n        return this.client.send('/api/logs/requests/stats', {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => responseData);\n    }\n}\n","import BaseService from '@/services/utils/BaseService';\nimport ClientResponseError from '@/ClientResponseError';\n\ninterface promiseCallbacks {\n    resolve: Function\n    reject: Function\n}\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport default class RealtimeService extends BaseService {\n    private clientId: string = \"\";\n    private eventSource: EventSource | null = null;\n    private subscriptions: { [key: string]: Array<EventListener> } = {};\n    private lastSentTopics: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 10000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(topic: string, callback: (data: any) => void): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error('topic must be set.')\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = (e as MessageEvent);\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[topic]) {\n            this.subscriptions[topic] = [];\n        }\n        this.subscriptions[topic].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[topic].length === 1) {\n            // send the updated subscriptions (if it is the first for the topic)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(topic, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        if (!this.hasSubscriptionListeners(topic)) {\n            return; // already unsubscribed\n        }\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all topic listeners\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource?.removeEventListener(topic, listener);\n            }\n            delete this.subscriptions[topic];\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (!this.hasSubscriptionListeners(topic)) {\n            // submit subscriptions change if there are no other active subscriptions related to the topic\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(topicPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let topic in this.subscriptions) {\n            if (!topic.startsWith(topicPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource?.removeEventListener(topic, listener);\n            }\n            delete this.subscriptions[topic];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(topic: string, listener: EventListener): Promise<void> {\n        if (!Array.isArray(this.subscriptions[topic]) || !this.subscriptions[topic].length) {\n            return; // already unsubscribed\n        }\n\n        let exist = false;\n        for (let i = this.subscriptions[topic].length - 1; i >= 0; i--) {\n            if (this.subscriptions[topic][i] !== listener) {\n                continue;\n            }\n\n            exist = true;                           // has at least one matching listener\n            delete this.subscriptions[topic][i];    // removes the function reference\n            this.subscriptions[topic].splice(i, 1); // reindex the array\n            this.eventSource?.removeEventListener(topic, listener);\n        }\n        if (!exist) {\n            return;\n        }\n\n        // remove the topic from the subscriptions list if there are no other listeners\n        if (!this.subscriptions[topic].length) {\n            delete this.subscriptions[topic];\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (!this.hasSubscriptionListeners(topic)) {\n            // submit subscriptions change if there are no other active subscriptions related to the topic\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(topicToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified topic\n        if (topicToCheck) {\n            return !!this.subscriptions[topicToCheck]?.length;\n        }\n\n        // check for at least one non-empty topic\n        for (let topic in this.subscriptions) {\n            if (!!this.subscriptions[topic]?.length) {\n                return true\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentTopics = this.getNonEmptySubscriptionTopics();\n\n        return this.client.send('/api/realtime', {\n            'method': 'POST',\n            'body': {\n                'clientId': this.clientId,\n                'subscriptions': this.lastSentTopics,\n            },\n            'params': {\n                '$cancelKey': \"realtime_\" + this.clientId,\n            },\n        }).catch((err) => {\n            if (err?.isAbort) {\n                return; // silently ignore aborted pending requests\n            }\n            throw err;\n        });\n    }\n\n    private getNonEmptySubscriptionTopics(): Array<string> {\n        const result : Array<string> = [];\n\n        for (let topic in this.subscriptions) {\n            if (this.subscriptions[topic].length) {\n                result.push(topic);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let topic in this.subscriptions) {\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource.addEventListener(topic, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let topic in this.subscriptions) {\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource.removeEventListener(topic, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0)  {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        })\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 10s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildUrl('/api/realtime'))\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(new Error(\"Failed to establish realtime connection.\"));\n        };\n\n        this.eventSource.addEventListener('PB_CONNECT', (e) => {\n            const msgEvent = (e as MessageEvent);\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions()\n            .then(async () => {\n                let retries = 3;\n                while (this.hasUnsentSubscriptions() && retries > 0) {\n                    retries--;\n                    // resubscribe to ensure that the latest topics are submitted\n                    //\n                    // This is needed because missed topics could happen on reconnect\n                    // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                    // was made before the submit was able to complete.\n                    await this.submitSubscriptions();\n                }\n            }).then(() => {\n                for (let p of this.pendingConnects) {\n                    p.resolve();\n                }\n\n                // reset connect meta\n                this.pendingConnects = [];\n                this.reconnectAttempts = 0;\n                clearTimeout(this.reconnectTimeoutId);\n                clearTimeout(this.connectTimeoutId);\n            }).catch((err) => {\n                this.clientId = \"\";\n                this.connectErrorHandler(err);\n            });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionTopics();\n        if (latestTopics.length != this.lastSentTopics.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentTopics.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout = this.predefinedReconnectIntervals[this.reconnectAttempts] || this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length - 1];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // reject any remaining connect promises\n            const err = new ClientResponseError(new Error(\"Realtime disconnected.\"));\n            for (let p of this.pendingConnects) {\n                p.reject(err);\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n","import BaseService         from '@/services/utils/BaseService';\nimport { BaseQueryParams } from '@/services/utils/QueryParams';\n\nexport interface healthCheckResponse {\n    code:    number;\n    message: string;\n}\n\nexport default class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     */\n    check(queryParams: BaseQueryParams = {}): Promise<healthCheckResponse> {\n        return this.client.send('/api/health', {\n            'method': 'GET',\n            'params': queryParams,\n        });\n    }\n}\n","import ClientResponseError from '@/ClientResponseError';\nimport BaseAuthStore       from '@/stores/BaseAuthStore';\nimport LocalAuthStore      from '@/stores/LocalAuthStore';\nimport ViewService               from './services/ViewService';\nimport SettingsService     from '@/services/SettingsService';\nimport AdminService        from '@/services/AdminService';\nimport RecordService       from '@/services/RecordService';\nimport CollectionService   from '@/services/CollectionService';\nimport LogService          from '@/services/LogService';\nimport RealtimeService     from '@/services/RealtimeService';\nimport HealthService       from '@/services/HealthService';\nimport Record              from '@/models/Record';\nimport { FileQueryParams } from '@/services/utils/QueryParams';\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect/modify the request config.\n     *\n     * Returns the new modified config that will be used to send the request.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, reqConfig) {\n     *     reqConfig.headers = Object.assign({}, reqConfig.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return reqConfig;\n     * };\n     * ```\n     */\n    beforeSend?: (url: string, reqConfig: { [key: string]: any }) => { [key: string]: any };\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             data:     data,\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: (response: Response, data: any) => any;\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Admin APIs**.\n     */\n    readonly admins: AdminService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    readonly views: ViewService;\n\n    /**\n     * An instance of the service that handles the **Record APIs**.\n     */\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(\n        baseUrl = '/',\n        authStore?: BaseAuthStore | null,\n        lang = 'en-US',\n    ) {\n        this.baseUrl   = baseUrl;\n        this.lang      = lang;\n        this.authStore = authStore || new LocalAuthStore();\n\n        // services\n        this.views = new ViewService(this);\n        this.admins      = new AdminService(this);\n        this.collections = new CollectionService(this);\n        this.logs        = new LogService(this);\n        this.settings    = new SettingsService(this);\n        this.realtime    = new RealtimeService(this);\n        this.health      = new HealthService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     *\n     * @param  {string} idOrName\n     * @return {RecordService}\n     */\n    collection(idOrName: string): RecordService {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(cancelKey: string): Client {\n        if (this.cancelControllers[cancelKey]) {\n            this.cancelControllers[cancelKey].abort();\n            delete this.cancelControllers[cancelKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Sends an api http request.\n     */\n    async send(path: string, reqConfig: { [key: string]: any }): Promise<any> {\n        let config = Object.assign({ method: 'GET' } as { [key: string]: any }, reqConfig);\n\n        // serialize the body if needed and set the correct content type\n        // note1: for FormData body the Content-Type header should be skipped\n        // note2: we are checking the constructor name because FormData is not available natively in node\n        if (config.body && config.body.constructor.name !== 'FormData') {\n            if (typeof config.body !== 'string') {\n                config.body = JSON.stringify(config.body);\n            }\n\n            // add the json header (if not already)\n            if (typeof config?.headers?.['Content-Type'] === 'undefined') {\n                config.headers = Object.assign({}, config.headers, {\n                    'Content-Type': 'application/json',\n                });\n            }\n        }\n\n        // add Accept-Language header (if not already)\n        if (typeof config?.headers?.['Accept-Language'] === 'undefined') {\n            config.headers = Object.assign({}, config.headers, {\n                'Accept-Language': this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has stored token\n            this.authStore?.token &&\n            // auth header is not explicitly set\n            (typeof config?.headers?.Authorization === 'undefined')\n        ) {\n            config.headers = Object.assign({}, config.headers, {\n                'Authorization': this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && config.params?.$autoCancel !== false) {\n            const cancelKey = config.params?.$cancelKey || ((config.method || 'GET') + path);\n\n            // cancel previous pending requests\n            this.cancelRequest(cancelKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[cancelKey] = controller;\n            config.signal = controller.signal;\n        }\n        // remove the special cancellation params from the other valid query params\n        delete config.params?.$autoCancel;\n        delete config.params?.$cancelKey;\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        // serialize the query parameters\n        if (typeof config.params !== 'undefined') {\n            const query = this.serializeQueryParams(config.params)\n            if (query) {\n                url += (url.includes('?') ? '&' : '?') + query;\n            }\n            delete config.params;\n        }\n\n        if (this.beforeSend) {\n            config = Object.assign({}, this.beforeSend(url, config));\n        }\n\n        // send the request\n        return fetch(url, config)\n            .then(async (response) => {\n                let data : any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = this.afterSend(response, data);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url:      response.url,\n                        status:   response.status,\n                        data:     data,\n                    });\n                }\n\n                return data;\n            }).catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getFileUrl(record: Record, filename: string, queryParams: FileQueryParams = {}): string {\n        const parts = [];\n        parts.push(\"api\")\n        parts.push(\"files\")\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName))\n        parts.push(encodeURIComponent(record.id))\n        parts.push(encodeURIComponent(filename))\n\n        let result = this.buildUrl(parts.join('/'));\n\n        if (Object.keys(queryParams).length) {\n            const params = new URLSearchParams(queryParams);\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl + (this.baseUrl.endsWith('/') ? '' : '/');\n        if (path) {\n            url += (path.startsWith('/') ? path.substring(1) : path);\n        }\n        return url;\n    }\n\n    /**\n     * Serializes the provided query parameters into a query string.\n     */\n    private serializeQueryParams(params: {[key: string]: any}): string {\n        const result: Array<string> = [];\n        for (const key in params) {\n            if (params[key] === null) {\n                // skip null query params\n                continue;\n            }\n\n            const value = params[key];\n            const encodedKey = encodeURIComponent(key);\n\n            if (Array.isArray(value)) {\n                // \"repeat\" array params\n                for (const v of value) {\n                    result.push(encodedKey + \"=\" + encodeURIComponent(v));\n                }\n            } else if (value instanceof Date) {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n            } else if (typeof value !== null && typeof value === 'object') {\n                result.push(encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value)));\n            } else {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value));\n            }\n        }\n\n        return result.join('&');\n    }\n}\n"],"names":["atobPolyfill","ClientResponseError","_super","errData","_this","this","call","url","status","data","isAbort","originalError","Object","setPrototypeOf","prototype","DOMException","name","message","_a","__extends","toJSON","__assign","Error","fieldContentRegExp","cookieSerialize","val","options","opt","assign","encode","defaultEncode","test","TypeError","value","result","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","toString","Date","isDate","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","defaultDecode","indexOf","decodeURIComponent","encodeURIComponent","getTokenPayload","token","encodedPayload","split","map","c","charCodeAt","slice","join","JSON","parse","e","atob","input","str","String","replace","length","bs","buffer","bc","idx","output","charAt","fromCharCode","BaseModel","load","_i","entries","_b","key","id","created","updated","defineProperty","get","clone","structuredClone","stringify","constructor","export","Record","collectionId","collectionName","loadExpand","expand","Array","isArray","Admin","avatar","email","LocalAuthStore","storageKey","storageFallback","_storageGet","model","save","_storageSet","clear","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","expirationThreshold","payload","keys","exp","now","isTokenExpired","triggerChange","loadFromCookie","cookie","rawData","decode","index","eqIdx","endIdx","lastIndexOf","trim","undefined","_","cookieParse","exportToCookie","defaultOptions","resultLength","Blob","size","_c","username","verified","onChange","callback","fireImmediately","push","i","splice","ListResult","page","perPage","totalItems","totalPages","items","BaseService","client","CrudService","getFullList","batch","queryParams","_getFullList","baseCrudPath","getList","_getList","getFirstListItem","filter","_getFirstListItem","getOne","_getOne","create","bodyParams","_create","update","_update","delete","_delete","BaseCrudService","basePath","batchSize","request","__awaiter","then","list","castedList","concat","send","method","params","responseData","item","$cancelKey","code","body","SchemaField","type","system","required","unique","View","listRule","sql","schema","field","ExternalAuth","recordId","provider","providerId","Collection","viewRule","createRule","updateRule","deleteRule","ViewRecord","LogRequest","remoteIp","ip","auth","userIp","referer","userAgent","meta","Views","getRecordsFullList","viewName","getRecordsList","console","log","ViewRecordListResult","SettingsService","getAll","testS3","testEmail","toEmail","emailTemplate","template","AdminService","authStore","success","authResponse","admin","authWithPassword","password","identity","headers","Authorization","bind","authRefresh","requestPasswordReset","confirmPasswordReset","passwordResetToken","passwordConfirm","RecordService","collectionIdOrName","baseCollectionPath","subscribeOne","warn","realtime","subscribe","topicOrCallback","topic","unsubscribe","unsubscribeByPrefix","record","listAuthMethods","usernamePassword","emailPassword","authProviders","usernameOrEmail","authWithOAuth2","codeVerifier","redirectUrl","createData","requestVerification","confirmVerification","verificationToken","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","responseData_1","unlinkExternalAuth","CollectionService","import","collections","deleteMissing","LogService","getRequestsList","getRequest","getRequestsStats","RealtimeService","apply","arguments","clientId","eventSource","subscriptions","lastSentTopics","maxConnectTimeout","reconnectAttempts","maxReconnectAttempts","Infinity","predefinedReconnectIntervals","pendingConnects","listener","msgEvent","isConnected","connect","sent","submitSubscriptions","addEventListener","unsubscribeByTopicAndListener","hasSubscriptionListeners","removeEventListener","disconnect","topicPrefix","hasAtleastOneTopic","startsWith","exist","topicToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionTopics","catch","err","removeAllSubscriptionListeners","Promise","resolve","reject","initConnect","clearTimeout","connectTimeoutId","setTimeout","connectErrorHandler","EventSource","buildUrl","onerror","lastEventId","retries","hasUnsentSubscriptions","reconnectTimeoutId","latestTopics","latestTopics_1","t","includes","timeout","fromReconnect","close","HealthService","check","Client","baseUrl","lang","cancelControllers","recordServices","enableAutoCancellation","views","ViewService","admins","logs","settings","health","collection","idOrName","autoCancellation","enable","cancelRequest","cancelKey","abort","cancelAllRequests","k","reqConfig","config","_d","_e","$autoCancel","_f","controller","AbortController","signal","_g","_h","query","serializeQueryParams","beforeSend","fetch","response","json","afterSend","getFileUrl","filename","parts","URLSearchParams","endsWith","substring","encodedKey","value_1","v","toISOString"],"mappings":"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"}