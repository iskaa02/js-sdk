{"version":3,"file":"pocketbase.iife.js","sources":["../src/ClientResponseError.ts","../src/stores/utils/jwt.ts","../src/stores/utils/cookie.ts","../src/models/utils/BaseModel.ts","../src/models/Record.ts","../src/models/Admin.ts","../src/stores/BaseAuthStore.ts","../src/stores/LocalAuthStore.ts","../src/models/utils/ListResult.ts","../src/services/utils/BaseService.ts","../src/services/utils/BaseCrudService.ts","../src/services/utils/CrudService.ts","../src/models/utils/SchemaField.ts","../src/models/View.ts","../src/models/ExternalAuth.ts","../src/models/Collection.ts","../src/models/ViewRecord.ts","../src/models/LogRequest.ts","../src/services/ViewService.ts","../src/services/SettingsService.ts","../src/services/AdminService.ts","../src/services/RecordService.ts","../src/services/CollectionService.ts","../src/services/LogService.ts","../src/services/RealtimeService.ts","../src/Client.ts"],"sourcesContent":["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport default class ClientResponseError extends Error {\n    url: string                = '';\n    status: number             = 0;\n    data: {[key: string]: any} = {};\n    isAbort:  boolean          = false;\n    originalError: any         = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (!(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (errData !== null && typeof errData === 'object') {\n            this.url    = typeof errData.url === 'string' ? errData.url : '';\n            this.status = typeof errData.status === 'number' ? errData.status : 0;\n            this.data   = errData.data !== null && typeof errData.data === 'object' ? errData.data : {};\n        }\n\n        if (typeof DOMException !== 'undefined' && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.data?.message;\n        if (!this.message) {\n            this.message = this.isAbort ?\n                'The request was autocancelled. More info you could find in https://github.com/pocketbase/js-sdk#auto-cancellation.' :\n                'Something went wrong while processing your request.';\n        }\n    }\n\n    // Make a POJO's copy of the current error class instance.\n    // @see https://github.com/vuex-orm/vuex-orm/issues/255\n    toJSON () {\n        return { ...this };\n    }\n}\n","let atobPolyfill: Function;\nif (typeof atob === 'function') {\n    atobPolyfill = atob\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n                // and if not first of each 4 characters,\n                // convert the first 8 bits to one ascii character\n                bc++ % 4) ?\n            (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n            0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(atobPolyfill(token.split('.')[1]).split('').map(function (c: string) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(''));\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {\n        }\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || (payload.exp - expirationThreshold) > (Date.now() / 1000))\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions{\n    decode?: (val: string) => string,\n}\n\n/**\n* Parses the given cookie header string into an object\n* The object has the various cookies as keys(names) => values\n*/\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any }  {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== 'string') {\n        return result;\n    }\n\n    const opt    = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf('=', index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(';', index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(';', eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n};\n\nexport interface SerializeOptions{\n    encode?:   (val: string | number | boolean) => string,\n    maxAge?:   number,\n    domain?:   string,\n    path?:     string,\n    expires?:  Date,\n    httpOnly?: boolean,\n    secure?:   boolean,\n    priority?: string,\n    sameSite?: boolean|string,\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(name: string, val: string, options?: SerializeOptions): string {\n    const opt    = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError('argument name is invalid');\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError('argument val is invalid');\n    }\n\n    let result = name + '=' + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError('option maxAge is invalid');\n        }\n\n        result += '; Max-Age=' + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError('option domain is invalid');\n        }\n\n        result += '; Domain=' + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError('option path is invalid');\n        }\n\n        result += '; Path=' + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError('option expires is invalid');\n        }\n\n        result += '; Expires=' + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += '; HttpOnly';\n    }\n\n    if (opt.secure) {\n        result += '; Secure';\n    }\n\n    if (opt.priority) {\n        const priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case 'low':\n                result += '; Priority=Low';\n                break;\n            case 'medium':\n                result += '; Priority=Medium';\n                break;\n            case 'high':\n                result += '; Priority=High';\n                break;\n            default:\n                throw new TypeError('option priority is invalid');\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += '; SameSite=Strict';\n                break;\n            case 'lax':\n                result += '; SameSite=Lax';\n                break;\n            case 'strict':\n                result += '; SameSite=Strict';\n                break;\n            case 'none':\n                result += '; SameSite=None';\n                break;\n            default:\n                throw new TypeError('option sameSite is invalid');\n        }\n    }\n\n    return result;\n};\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf('%') !== -1\n        ? decodeURIComponent(val)\n        : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return (\n        Object.prototype.toString.call(val) === '[object Date]' ||\n        val instanceof Date\n    );\n}\n","export default abstract class BaseModel {\n    [key: string]: any,\n\n    id!:      string;\n    created!: string;\n    updated!: string;\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the current model.\n     */\n    load(data: { [key: string]: any }) {\n        for (const [key, value] of Object.entries(data)) {\n            this[key] = value;\n        }\n\n        // normalize known fields\n        this.id      = typeof data.id      !== 'undefined' ? data.id      : '';\n        this.created = typeof data.created !== 'undefined' ? data.created : '';\n        this.updated = typeof data.updated !== 'undefined' ? data.updated : '';\n    }\n\n    /**\n     * Returns whether the current loaded data represent a stored db record.\n     */\n    get isNew(): boolean {\n        return !this.id;\n    }\n\n    /**\n     * Creates a seep clone of the current model.\n     */\n    clone(): BaseModel {\n        return new (this.constructor as any)(JSON.parse(JSON.stringify(this)));\n    }\n\n    /**\n     * Exports all model properties as a new plain object.\n     */\n    export(): { [key: string]: any } {\n        return Object.assign({}, this);\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Record extends BaseModel {\n    collectionId!:   string;\n    collectionName!: string;\n    expand!:         {[key: string]: Record|Array<Record>};\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        // normalize common fields\n        this.collectionId   = typeof data.collectionId   === 'string' ? data.collectionId   : '';\n        this.collectionName = typeof data.collectionName === 'string' ? data.collectionName : '';\n        this.expand         = typeof data.expand === 'object' && data.expand !== null ? data.expand : {};\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Admin extends BaseModel {\n    avatar!: number;\n    email!:  string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.avatar = typeof data.avatar === 'number' ? data.avatar : 0;\n        this.email  = typeof data.email  === 'string' ? data.email  : '';\n    }\n}\n","import { cookieParse, cookieSerialize, SerializeOptions } from '@/stores/utils/cookie';\nimport { isTokenExpired, getTokenPayload } from '@/stores/utils/jwt';\nimport Record  from '@/models/Record';\nimport Admin from '@/models/Admin';\n\nexport type OnStoreChangeFunc = (token: string, model: Record|Admin|null) => void;\n\nconst defaultCookieKey = 'pb_auth';\n\n/**\n * Base AuthStore class that is intended to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport default abstract class BaseAuthStore {\n    protected baseToken: string = '';\n    protected baseModel: Record|Admin|null = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): Record|Admin|null {\n        return this.baseModel;\n    }\n\n    /**\n     * Checks if the store has valid (aka. existing and unexpired) token.\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model: Record|Admin|null): void {\n        this.baseToken = token || '';\n\n        // normalize the model instance\n        if (model !== null && typeof model === 'object') {\n            this.baseModel = typeof (model as any).collectionId !== 'undefined' ?\n                new Record(model) : new Admin(model);\n        } else {\n            this.baseModel = null;\n        }\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = '';\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || '')[key] || '';\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== 'object' || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || '', data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure:   true,\n            sameSite: true,\n            httpOnly: true,\n            path:     \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date('1970-01-01');\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            model: this.model?.export() || null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength = typeof Blob !== 'undefined' ?\n            (new Blob([result])).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.model && resultLength > 4096) {\n            rawData.model = {id: rawData?.model?.id, email: rawData?.model?.email};\n            if (this.model instanceof Record) {\n                rawData.model.username     = this.model.username;\n                rawData.model.verified     = this.model.verified;\n                rawData.model.collectionId = this.model.collectionId;\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.model);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i];    // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        }\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n","import BaseAuthStore from '@/stores/BaseAuthStore';\nimport Record        from '@/models/Record';\nimport Admin         from '@/models/Admin';\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport default class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): Record|Admin|null {\n        const data = this._storageGet(this.storageKey) || {};\n\n        if (\n            data === null ||\n            typeof data !== 'object' ||\n            data.model === null ||\n            typeof data.model !== 'object'\n        ) {\n            return null;\n        }\n\n        // admins don't have `collectionId` prop\n        if (typeof data.model?.collectionId === 'undefined') {\n            return new Admin(data.model);\n        }\n\n        return new Record(data.model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model: Record|Admin|null) {\n        this._storageSet(this.storageKey, {\n            'token': token,\n            'model': model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || '';\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) { // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== 'string') {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n}\n","import BaseModel from './BaseModel';\n\nexport default class ListResult<M = BaseModel> {\n    page!:       number;\n    perPage!:    number;\n    totalItems!: number;\n    totalPages!: number;\n    items!:      Array<M>;\n\n    constructor(\n        page: number,\n        perPage: number,\n        totalItems: number,\n        totalPages: number,\n        items: Array<M>,\n    ) {\n        this.page       = page > 0 ? page : 1;\n        this.perPage    = perPage >= 0 ? perPage : 0;\n        this.totalItems = totalItems >= 0 ? totalItems : 0;\n        this.totalPages = totalPages >= 0 ? totalPages : 0;\n        this.items      = items || [];\n    }\n}\n","import Client from '@/Client';\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport default abstract class BaseService {\n    readonly client: Client\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import BaseModel           from '@/models/utils/BaseModel';\nimport ListResult          from '@/models/utils/ListResult';\nimport BaseService         from '@/services/utils/BaseService';\nimport ClientResponseError from '@/ClientResponseError';\n\n// @todo since there is no longer need of SubCrudService consider merging with CrudService in v0.9+\nexport default abstract class BaseCrudService<M extends BaseModel> extends BaseService {\n    /**\n     * Response data decoder.\n     */\n    abstract decode(data: { [key: string]: any }): M\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(basePath: string, batchSize = 100, queryParams = {}): Promise<Array<T>> {\n        var result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this._getList(basePath, page, batchSize, queryParams).then((list) => {\n                const castedList = (list as any as ListResult<T>);\n                const items = castedList.items;\n                const totalItems = castedList.totalItems;\n\n                result = result.concat(items);\n\n                if (items.length && totalItems > result.length) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    protected _getList<T = M>(basePath: string, page = 1, perPage = 30, queryParams = {}): Promise<ListResult<T>> {\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send(basePath, {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<T> = [];\n            if (responseData?.items) {\n                responseData.items = responseData.items || [];\n                for (const item of responseData.items) {\n                    items.push(this.decode(item) as any as T);\n                }\n            }\n\n            return new ListResult<T>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    protected _getOne<T = M>(basePath: string, id: string, queryParams = {}): Promise<T> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Returns the first found item by a list filter.\n     *\n     * Internally it calls `_getList(basePath, 1, 1, { filter })` and returns its\n     * first item.\n     *\n     * For consistency with `_getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     */\n    protected _getFirstListItem<T = M>(basePath: string, filter: string, queryParams = {}): Promise<T> {\n        queryParams = Object.assign({\n            'filter': filter,\n            '$cancelKey': 'one_by_filter_' + basePath + \"_\" + filter,\n        }, queryParams);\n\n        return this._getList<T>(basePath, 1, 1, queryParams)\n            .then((result) => {\n                if (!result?.items?.length) {\n                    throw new ClientResponseError({\n                        status: 404,\n                        data: {\n                            code:    404,\n                            message: \"The requested resource wasn't found.\",\n                            data:    {},\n                        },\n                    });\n                }\n\n                return result.items[0];\n            });\n    }\n\n    /**\n     * Creates a new item.\n     */\n    protected _create<T = M>(basePath: string, bodyParams = {}, queryParams = {}): Promise<T> {\n        return this.client.send(basePath, {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    protected _update<T = M>(basePath: string, id: string, bodyParams = {}, queryParams = {}): Promise<T> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    protected _delete(basePath: string, id: string, queryParams = {}): Promise<boolean> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n","import ListResult          from '@/models/utils/ListResult';\nimport BaseModel           from '@/models/utils/BaseModel';\nimport BaseCrudService     from '@/services/utils/BaseCrudService';\n\nexport default abstract class CrudService<M extends BaseModel> extends BaseCrudService<M> {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getFullList<T = M>(batch = 200, queryParams = {}): Promise<Array<T>> {\n        return this._getFullList<T>(this.baseCrudPath, batch, queryParams);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getList<T = M>(page = 1, perPage = 30, queryParams = {}): Promise<ListResult<T>> {\n        return this._getList<T>(this.baseCrudPath, page, perPage, queryParams);\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter })` and returns the\n     * first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     */\n    getFirstListItem<T = M>(filter: string, queryParams = {}): Promise<T> {\n        return this._getFirstListItem<T>(this.baseCrudPath, filter, queryParams);\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getOne<T = M>(id: string, queryParams = {}): Promise<T> {\n        return this._getOne<T>(this.baseCrudPath, id, queryParams);\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    create<T = M>(bodyParams = {}, queryParams = {}): Promise<T> {\n        return this._create<T>(this.baseCrudPath, bodyParams, queryParams);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    update<T = M>(id: string, bodyParams = {}, queryParams = {}): Promise<T> {\n        return this._update<T>(this.baseCrudPath, id, bodyParams, queryParams);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(id: string, queryParams = {}): Promise<boolean> {\n        return this._delete(this.baseCrudPath, id, queryParams);\n    }\n}\n","export default class SchemaField {\n    id!:       string;\n    name!:     string;\n    type!:     string;\n    system!:   boolean;\n    required!: boolean;\n    unique!:   boolean;\n    options!:  { [key: string]: any };\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the field.\n     */\n    load(data: { [key: string]: any }) {\n        this.id       = typeof data.id !== 'undefined' ? data.id : '';\n        this.name     = typeof data.name !== 'undefined' ? data.name : '';\n        this.type     = typeof data.type !== 'undefined' ? data.type : 'text';\n        this.system   = !!data.system;\n        this.required = !!data.required;\n        this.unique   = !!data.unique;\n        this.options  = typeof data.options === 'object' && data.options !== null ? data.options : {};\n    }\n}\n","import BaseModel from \"@/models/utils/BaseModel\";\nimport SchemaField from \"@/models/utils/SchemaField\";\n\nexport default class ViewService extends BaseModel {\n  name!: string;\n  schema!: Array<SchemaField>;\n  listRule!: null | string;\n  sql!: string;\n\n  /**\n   * @inheritdoc\n   */\n  load(data: { [key: string]: any }) {\n    super.load(data);\n\n    this.name = typeof data.name === \"string\" ? data.name : \"\";\n\n    // rules\n    this.listRule = typeof data.listRule === \"string\" ? data.listRule : null;\n\n    // sql\n    this.sql = typeof data.sql === \"string\" ? data.sql : \"\";\n\n    // schema\n    data.schema = Array.isArray(data.schema) ? data.schema : [];\n    this.schema = [];\n    for (let field of data.schema) {\n      this.schema.push(new SchemaField(field));\n    }\n  }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class ExternalAuth extends BaseModel {\n    recordId!:     string;\n    collectionId!: string;\n    provider!:     string;\n    providerId!:   string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.recordId     = typeof data.recordId     === 'string' ? data.recordId     : '';\n        this.collectionId = typeof data.collectionId === 'string' ? data.collectionId : '';\n        this.provider     = typeof data.provider     === 'string' ? data.provider     : '';\n        this.providerId   = typeof data.providerId   === 'string' ? data.providerId   : '';\n    }\n}\n","import BaseModel   from '@/models/utils/BaseModel';\nimport SchemaField from '@/models/utils/SchemaField';\n\nexport default class Collection extends BaseModel {\n    name!:       string;\n    type!:       string;\n    schema!:     Array<SchemaField>;\n    system!:     boolean;\n    listRule!:   null|string;\n    viewRule!:   null|string;\n    createRule!: null|string;\n    updateRule!: null|string;\n    deleteRule!: null|string;\n    options!:    {[key:string]: any};\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.system    = !!data.system;\n        this.name      = typeof data.name    === 'string'    ? data.name    : '';\n        this.type      = typeof data.type    === 'string'    ? data.type    : 'base';\n        this.options   = typeof data.options !== 'undefined' ? data.options : {};\n\n        // rules\n        this.listRule   = typeof data.listRule   === 'string' ? data.listRule   : null;\n        this.viewRule   = typeof data.viewRule   === 'string' ? data.viewRule   : null;\n        this.createRule = typeof data.createRule === 'string' ? data.createRule : null;\n        this.updateRule = typeof data.updateRule === 'string' ? data.updateRule : null;\n        this.deleteRule = typeof data.deleteRule === 'string' ? data.deleteRule : null;\n\n        // schema\n        data.schema = Array.isArray(data.schema) ? data.schema : [];\n        this.schema = [];\n        for (let field of data.schema) {\n            this.schema.push(new SchemaField(field));\n        }\n    }\n\n    /**\n     * Checks if the current model is \"base\" collection.\n     */\n    get isBase(): boolean {\n        return this.type === 'base';\n    }\n\n    /**\n     * Checks if the current model is \"auth\" collection.\n     */\n    get isAuth(): boolean {\n        return this.type === 'auth';\n    }\n\n    /**\n     * Checks if the current model is \"single\" collection.\n     */\n    get isSingle(): boolean {\n        return this.type === 'single';\n    }\n}\n","\nexport default class ViewRecord {\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    [key: string]: any,\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        for (const [key, value] of Object.entries(data)) {\n            this[key] = value;\n        }\n    }\n    clone(): ViewRecord {\n        return new (this.constructor as any)(JSON.parse(JSON.stringify(this)));\n    }\n\n    /**\n     * Exports all model properties as a new plain object.\n     */\n    export(): { [key: string]: any } {\n        return Object.assign({}, this);\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class LogRequest extends BaseModel {\n    url!:       string;\n    method!:    string;\n    status!:    number;\n    auth!:      string;\n    remoteIp!:  string;\n    userIp!:    string;\n    referer!:   string;\n    userAgent!: string;\n    meta!:      { [key: string]: any };\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        // fallback to the ip field for backward compatability\n        data.remoteIp = data.remoteIp || data.ip;\n\n        this.url       = typeof data.url       === 'string' ? data.url       : '';\n        this.method    = typeof data.method    === 'string' ? data.method    : 'GET';\n        this.status    = typeof data.status    === 'number' ? data.status    : 200;\n        this.auth      = typeof data.auth      === 'string' ? data.auth      : 'guest';\n        this.remoteIp  = typeof data.remoteIp  === 'string' ? data.remoteIp  : '';\n        this.userIp    = typeof data.userIp    === 'string' ? data.userIp    : '';\n        this.referer   = typeof data.referer   === 'string' ? data.referer   : '';\n        this.userAgent = typeof data.userAgent === 'string' ? data.userAgent : '';\n        this.meta      = typeof data.meta === 'object' && data.meta !== null ? data.meta : {};\n    }\n}\n","import CrudService from \"@/services/utils/CrudService\";\nimport ViewService from \"@/models/View\";\nimport { ViewRecord } from \"..\";\n\nexport default class Views extends CrudService<ViewService> {\n  /**\n   * @inheritdoc\n   */\n  decode(data: { [key: string]: any }): ViewService {\n    return new ViewService(data);\n  }\n\n  /**\n   * @inheritdoc */\n  get baseCrudPath(): string {\n    return \"/api/admins\";\n  }\n\n  getRecordsFullList(\n    viewName: string,\n    batchSize = 100,\n    queryParams = {}\n  ): Promise<Array<ViewRecord>> {\n    const basePath = `${this.baseCrudPath}/${viewName}/records`;\n    var result: Array<ViewRecord> = [];\n\n    let request = async (page: number): Promise<Array<any>> => {\n      return this.getRecordsList(basePath, page, batchSize, queryParams).then(\n        (list) => {\n          console.log(list);\n\n          const castedList = list as ViewRecordListResult;\n          const items = castedList.items;\n          const totalItems = castedList.totalItems;\n\n          result = result.concat(items);\n\n          if (items.length && totalItems > result.length) {\n            return request(page + 1);\n          }\n\n          return result;\n        }\n      );\n    };\n\n    return request(1);\n  }\n\n  /**\n   * Returns paginated items list.\n   */\n  getRecordsList(\n    viewName: string,\n    page = 1,\n    perPage = 30,\n    queryParams = {}\n  ): Promise<ViewRecordListResult> {\n    const basePath = `${this.baseCrudPath}/${viewName}/records`;\n    queryParams = Object.assign(\n      {\n        page: page,\n        perPage: perPage,\n      },\n      queryParams\n    );\n\n    return this.client\n      .send(basePath, {\n        method: \"GET\",\n        params: queryParams,\n      })\n      .then((responseData: any) => {\n        const items: Array<ViewRecord> = [];\n        if (responseData?.items) {\n          responseData.items = responseData.items || [];\n          for (const item of responseData.items) {\n            items.push(new ViewRecord(item));\n          }\n        }\n\n        return new ViewRecordListResult(\n          responseData?.page || 1,\n          responseData?.perPage || 0,\n          responseData?.totalItems || 0,\n          responseData?.totalPages || 0,\n          items\n        );\n      });\n  }\n}\n\nclass ViewRecordListResult {\n  page!: number;\n  perPage!: number;\n  totalItems!: number;\n  totalPages!: number;\n  items!: Array<ViewRecord>;\n\n  constructor(\n    page: number,\n    perPage: number,\n    totalItems: number,\n    totalPages: number,\n    items: Array<ViewRecord>\n  ) {\n    this.page = page > 0 ? page : 1;\n    this.perPage = perPage >= 0 ? perPage : 0;\n    this.totalItems = totalItems >= 0 ? totalItems : 0;\n    this.totalPages = totalPages >= 0 ? totalPages : 0;\n    this.items = items || [];\n  }\n}\n","import BaseService from '@/services/utils/BaseService';\n\nexport default class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     */\n    getAll(queryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Bulk updates app settings.\n     */\n    update(bodyParams = {}, queryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Performs a S3 storage connection test.\n     */\n    testS3(queryParams = {}): Promise<boolean> {\n        return this.client.send('/api/settings/test/s3', {\n            'method': 'POST',\n            'params': queryParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     */\n    testEmail(toEmail: string, emailTemplate: string, queryParams = {}): Promise<boolean> {\n        const bodyParams = {\n            'email':    toEmail,\n            'template': emailTemplate,\n        };\n\n        return this.client.send('/api/settings/test/email', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n}\n","import CrudService from '@/services/utils/CrudService';\nimport Admin       from '@/models/Admin';\n\nexport type AdminAuthResponse = {\n    [key: string]: any,\n    token: string,\n    admin: Admin,\n}\n\nexport default class AdminService extends CrudService<Admin> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Admin {\n        return new Admin(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/admins';\n    }\n\n    // ---------------------------------------------------------------\n    // Post update/delete AuthStore sync\n    // ---------------------------------------------------------------\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = Admin>(id: string, bodyParams = {}, queryParams = {}): Promise<T> {\n        return super.update<Admin>(id, bodyParams, queryParams).then((item) => {\n            // update the store state if the updated item id matches with the stored model\n            if (\n                this.client.authStore.model &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' && // is not record auth\n                this.client.authStore.model?.id === item?.id\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, queryParams = {}): Promise<boolean> {\n        return super.delete(id, queryParams).then((success) => {\n            // clear the store state if the deleted item id matches with the stored model\n            if (\n                success &&\n                this.client.authStore.model &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' && // is not record auth\n                this.client.authStore.model?.id === id\n            ) {\n                this.client.authStore.clear();\n            }\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'admin': admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account with its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authWithPassword(\n        email: string,\n        password: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<AdminAuthResponse> {\n        bodyParams = Object.assign({\n            'identity': email,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/auth-with-password', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authRefresh(bodyParams = {}, queryParams = {}): Promise<AdminAuthResponse> {\n        return this.client.send(this.baseCrudPath + '/auth-refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n}\n","import Client              from '@/Client';\nimport CrudService         from '@/services/utils/CrudService';\nimport { UnsubscribeFunc } from '@/services/RealtimeService';\nimport Record              from '@/models/Record';\nimport ExternalAuth        from '@/models/ExternalAuth';\n\nexport interface RecordAuthResponse<T = Record> {\n    token:  string;\n    record: T;\n    meta?: {[key: string]: any};\n}\n\nexport interface AuthProviderInfo {\n    name:                string;\n    state:               string;\n    codeVerifier:        string;\n    codeChallenge:       string;\n    codeChallengeMethod: string;\n    authUrl:             string;\n}\n\nexport interface AuthMethodsList {\n    usernamePassword: boolean;\n    emailPassword:    boolean;\n    authProviders:    Array<AuthProviderInfo>;\n}\n\nexport interface RecordSubscription<T = Record> {\n    action: string;\n    record: T;\n}\n\nexport default class RecordService extends CrudService<Record> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    decode<T = Record>(data: { [key: string]: any }): T {\n        return new Record(data) as any as T;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + '/records';\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return '/api/collections/' + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * @deprecated Use subscribe(recordId, callback) instead.\n     *\n     * Subscribe to the realtime changes of a single record in the collection.\n     */\n    async subscribeOne<T = Record>(recordId: string, callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc> {\n        console.warn(\"PocketBase: subscribeOne(recordId, callback) is deprecated. Please replace it with subsribe(recordId, callback).\");\n        return this.client.realtime.subscribe(this.collectionIdOrName + \"/\" + recordId, callback);\n    }\n\n    /**\n     * @deprecated This form of subscribe is deprecated. Please use `subscribe(\"*\", callback)`.\n     */\n    async subscribe<T = Record>(callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc>\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = Record>(topic: string, callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc>\n\n    async subscribe<T = Record>(\n        topicOrCallback: string|((data: RecordSubscription<T>) => void),\n        callback?: (data: RecordSubscription<T>) => void\n    ): Promise<UnsubscribeFunc> {\n        if (typeof topicOrCallback === 'function') {\n            console.warn(\"PocketBase: subscribe(callback) is deprecated. Please replace it with subsribe('*', callback).\");\n            return this.client.realtime.subscribe(this.collectionIdOrName, topicOrCallback);\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        if (topicOrCallback === \"\") {\n            throw new Error(\"Missing topic.\");\n        }\n\n        let topic = this.collectionIdOrName;\n        if (topicOrCallback !== \"*\") {\n            topic += ('/' + topicOrCallback);\n        }\n\n        return this.client.realtime.subscribe(topic, callback)\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe wildcard topic\n        if (topic === \"*\") {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName);\n        }\n\n        // unsubscribe recordId topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName + \"/\" + topic);\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Post update/delete AuthStore sync\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = Record>(id: string, bodyParams = {}, queryParams = {}): Promise<T> {\n        return super.update<Record>(id, bodyParams, queryParams).then((item) => {\n            if (\n                typeof this.client.authStore.model?.collectionId !== 'undefined' && // is record auth\n                this.client.authStore.model?.id === item?.id\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, queryParams = {}): Promise<boolean> {\n        return super.delete(id, queryParams).then((success) => {\n            if (\n                success &&\n                typeof this.client.authStore.model?.collectionId !== 'undefined' && // is record auth\n                this.client.authStore.model?.id === id\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth collection handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = Record>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token':  responseData?.token || '',\n            'record': record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     */\n    listAuthMethods(queryParams = {}): Promise<AuthMethodsList> {\n        return this.client.send(this.baseCollectionPath + '/auth-methods', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            return Object.assign({}, responseData, {\n                // normalize common fields\n                'usernamePassword': !!responseData?.usernamePassword,\n                'emailPassword':    !!responseData?.emailPassword,\n                'authProviders':    Array.isArray(responseData?.authProviders) ? responseData?.authProviders : [],\n            });\n        });\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     */\n    authWithPassword<T = Record>(\n        usernameOrEmail: string,\n        password: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<RecordAuthResponse<T>> {\n        bodyParams = Object.assign({\n            'identity': usernameOrEmail,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-password', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     */\n    authWithOAuth2<T = Record>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData = {},\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<RecordAuthResponse<T>> {\n        bodyParams = Object.assign({\n            'provider':     provider,\n            'code':         code,\n            'codeVerifier': codeVerifier,\n            'redirectUrl':  redirectUrl,\n            'createData':  createData,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-oauth2', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     */\n    authRefresh<T = Record>(bodyParams = {}, queryParams = {}): Promise<RecordAuthResponse<T>> {\n        return this.client.send(this.baseCollectionPath + '/auth-refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     */\n    requestVerification(\n        email: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     */\n    confirmVerification(\n        verificationToken: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token': verificationToken,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     */\n    requestEmailChange(\n        newEmail: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'newEmail': newEmail,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     */\n    confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token': emailChangeToken,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Lists all linked external auth providers for the specified auth record.\n     */\n    listExternalAuths(\n        recordId: string,\n        queryParams = {}\n    ): Promise<Array<ExternalAuth>> {\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => {\n            const items: Array<ExternalAuth> = [];\n\n            if (Array.isArray(responseData)) {\n                for (const item of responseData) {\n                    items.push(new ExternalAuth(item));\n                }\n            }\n\n            return items;\n        });\n    }\n\n    /**\n     * Unlink a single external auth provider from the specified auth record.\n     */\n    unlinkExternalAuth(\n        recordId: string,\n        provider: string,\n        queryParams = {}\n    ): Promise<boolean> {\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths/' + encodeURIComponent(provider), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n","import CrudService from '@/services/utils/CrudService';\nimport Collection  from '@/models/Collection';\n\nexport default class CollectionService extends CrudService<Collection> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Collection {\n        return new Collection(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/collections';\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     */\n    async import(collections: Array<Collection>, deleteMissing: boolean = false, queryParams = {}): Promise<true> {\n        return this.client.send(this.baseCrudPath + '/import', {\n            'method': 'PUT',\n            'params': queryParams,\n            'body': {\n                'collections':  collections,\n                'deleteMissing': deleteMissing,\n            }\n        }).then(() => true);\n    }\n}\n","import LogRequest  from '@/models/LogRequest';\nimport ListResult  from '@/models/utils/ListResult';\nimport BaseService from '@/services/utils/BaseService';\n\nexport type HourlyStats = {\n    total: number,\n    date:  string,\n}\n\nexport default class LogService extends BaseService {\n    /**\n     * Returns paginated logged requests list.\n     */\n    getRequestsList(page = 1, perPage = 30, queryParams = {}): Promise<ListResult<LogRequest>> {\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send('/api/logs/requests', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<LogRequest> = [];\n            if (responseData?.items) {\n                responseData.items = responseData?.items || [];\n                for (const item of responseData.items) {\n                    items.push(new LogRequest(item));\n                }\n            }\n\n            return new ListResult<LogRequest>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns a single logged request by its id.\n     */\n    getRequest(id: string, queryParams = {}): Promise<LogRequest> {\n        return this.client.send('/api/logs/requests/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => new LogRequest(responseData));\n    }\n\n    /**\n     * Returns request logs statistics.\n     */\n    getRequestsStats(queryParams = {}): Promise<Array<HourlyStats>> {\n        return this.client.send('/api/logs/requests/stats', {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => responseData);\n    }\n}\n","import BaseService from '@/services/utils/BaseService';\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport default class RealtimeService extends BaseService {\n    private clientId: string = \"\";\n    private eventSource: EventSource | null = null;\n    private subscriptions: { [key: string]: Array<EventListener> } = {};\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(topic: string, callback: (data: any) => void): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error('topic must be set.')\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = (e as MessageEvent);\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[topic]) {\n            this.subscriptions[topic] = [];\n        }\n        this.subscriptions[topic].push(listener);\n\n        if (!this.eventSource) {\n            // start a new sse connection\n            this.connect();\n        } else if (this.subscriptions[topic].length === 1) {\n            // send the updated subscriptions (if it is the first for the topic)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource.addEventListener(topic, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        if (!this.hasSubscriptionListeners(topic)) {\n            return; // already unsubscribed\n        }\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all topic listeners\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource?.removeEventListener(topic, listener);\n            }\n            delete this.subscriptions[topic];\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (!this.hasSubscriptionListeners(topic)) {\n            // submit subscriptions change if there are no other active subscriptions related to the topic\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(topicPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let topic in this.subscriptions) {\n            if (!topic.startsWith(topicPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource?.removeEventListener(topic, listener);\n            }\n            delete this.subscriptions[topic];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(topic: string, listener: EventListener): Promise<void> {\n        if (!Array.isArray(this.subscriptions[topic]) || !this.subscriptions[topic].length) {\n            return; // already unsubscribed\n        }\n\n        let exist = false;\n        for (let i = this.subscriptions[topic].length - 1; i >= 0; i--) {\n            if (this.subscriptions[topic][i] !== listener) {\n                continue;\n            }\n\n            exist = true;                           // has at least one matching listener\n            delete this.subscriptions[topic][i];    // removes the function reference\n            this.subscriptions[topic].splice(i, 1); // reindex the array\n            this.eventSource?.removeEventListener(topic, listener);\n        }\n        if (!exist) {\n            return;\n        }\n\n        // remove the topic from the subscriptions list if there are no other listeners\n        if (!this.subscriptions[topic].length) {\n            delete this.subscriptions[topic];\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (!this.hasSubscriptionListeners(topic)) {\n            // submit subscriptions change if there are no other active subscriptions related to the topic\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(topicToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified topic\n        if (topicToCheck) {\n            return !!this.subscriptions[topicToCheck]?.length;\n        }\n\n        // check for at least one non-empty topic\n        for (let topic in this.subscriptions) {\n            if (!!this.subscriptions[topic]?.length) {\n                return true\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<boolean> {\n        if (!this.clientId) {\n            return false;\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        return this.client.send('/api/realtime', {\n            'method': 'POST',\n            'body': {\n                'clientId': this.clientId,\n                'subscriptions': this.getNonEmptySubscriptionTopics(),\n            },\n            'params': {\n                '$cancelKey': \"realtime_subscriptions_\" + this.clientId,\n            },\n        }).then(() => true).catch((err) => {\n            if (err?.isAbort) {\n                return true; // silently ignore aborted pending requests\n            }\n            throw err;\n        });\n    }\n\n    private getNonEmptySubscriptionTopics(): Array<string> {\n        const result : Array<string> = [];\n\n        for (let topic in this.subscriptions) {\n            if (this.subscriptions[topic].length) {\n                result.push(topic);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let topic in this.subscriptions) {\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource.addEventListener(topic, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let topic in this.subscriptions) {\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource.removeEventListener(topic, listener);\n            }\n        }\n    }\n\n    private connectHandler(e: Event): void {\n        const msgEvent = (e as MessageEvent);\n        this.clientId = msgEvent?.lastEventId;\n        this.submitSubscriptions();\n    }\n\n    private connect(): void {\n        this.disconnect();\n        this.eventSource = new EventSource(this.client.buildUrl('/api/realtime'))\n        this.eventSource.addEventListener('PB_CONNECT', (e) => this.connectHandler(e));\n    }\n\n    private disconnect(): void {\n        this.removeAllSubscriptionListeners();\n        this.eventSource?.removeEventListener('PB_CONNECT', (e) => this.connectHandler(e));\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n    }\n}\n","import ClientResponseError from \"@/ClientResponseError\";\nimport BaseAuthStore from \"@/stores/BaseAuthStore\";\nimport LocalAuthStore from \"@/stores/LocalAuthStore\";\nimport ViewService from \"./services/ViewService\";\nimport SettingsService from \"@/services/SettingsService\";\nimport AdminService from \"@/services/AdminService\";\nimport RecordService from \"@/services/RecordService\";\nimport CollectionService from \"@/services/CollectionService\";\nimport LogService from \"@/services/LogService\";\nimport RealtimeService from \"@/services/RealtimeService\";\nimport Record from \"@/models/Record\";\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n  /**\n   * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n   */\n  baseUrl: string;\n\n  /**\n   * Hook that get triggered right before sending the fetch request,\n   * allowing you to inspect/modify the request config.\n   *\n   * Returns the new modified config that will be used to send the request.\n   *\n   * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n   *\n   * Example:\n   * ```js\n   * client.beforeSend = function (url, reqConfig) {\n   *     reqConfig.headers = Object.assign({}, reqConfig.headers, {\n   *         'X-Custom-Header': 'example',\n   *     });\n   *\n   *     return reqConfig;\n   * };\n   * ```\n   */\n  beforeSend?: (\n    url: string,\n    reqConfig: { [key: string]: any }\n  ) => { [key: string]: any };\n\n  /**\n   * Hook that get triggered after successfully sending the fetch request,\n   * allowing you to inspect/modify the response object and its parsed data.\n   *\n   * Returns the new Promise resolved `data` that will be returned to the client.\n   *\n   * Example:\n   * ```js\n   * client.afterSend = function (response, data) {\n   *     if (response.status != 200) {\n   *         throw new ClientResponseError({\n   *             url:      response.url,\n   *             status:   response.status,\n   *             data:     data,\n   *         });\n   *     }\n   *\n   *     return data;\n   * };\n   * ```\n   */\n  afterSend?: (response: Response, data: any) => any;\n\n  /**\n   * Optional language code (default to `en-US`) that will be sent\n   * with the requests to the server as `Accept-Language` header.\n   */\n  lang: string;\n\n  /**\n   * A replaceable instance of the local auth store service.\n   */\n  authStore: BaseAuthStore;\n\n  /**\n   * An instance of the service that handles the **Settings APIs**.\n   */\n  readonly settings: SettingsService;\n\n  /**\n   * An instance of the service that handles the **Admin APIs**.\n   */\n  readonly admins: AdminService;\n\n  /**\n   * An instance of the service that handles the **Collection APIs**.\n   */\n  readonly collections: CollectionService;\n\n  readonly views: ViewService;\n\n  /**\n   * An instance of the service that handles the **Record APIs**.\n   */\n\n  /**\n   * An instance of the service that handles the **Log APIs**.\n   */\n  readonly logs: LogService;\n\n  /**\n   * An instance of the service that handles the **Realtime APIs**.\n   */\n  readonly realtime: RealtimeService;\n\n  private cancelControllers: { [key: string]: AbortController } = {};\n  private recordServices: { [key: string]: RecordService } = {};\n  private enableAutoCancellation: boolean = true;\n\n  constructor(baseUrl = \"/\", authStore?: BaseAuthStore | null, lang = \"en-US\") {\n    this.baseUrl = baseUrl;\n    this.lang = lang;\n    this.authStore = authStore || new LocalAuthStore();\n\n    // services\n    this.views = new ViewService(this);\n    this.admins = new AdminService(this);\n    this.collections = new CollectionService(this);\n    this.logs = new LogService(this);\n    this.settings = new SettingsService(this);\n    this.realtime = new RealtimeService(this);\n  }\n\n  /**\n   * Returns the RecordService associated to the specified collection.\n   *\n   * @param  {string} idOrName\n   * @return {RecordService}\n   */\n  collection(idOrName: string): RecordService {\n    if (!this.recordServices[idOrName]) {\n      this.recordServices[idOrName] = new RecordService(this, idOrName);\n    }\n\n    return this.recordServices[idOrName];\n  }\n\n  /**\n   * Globally enable or disable auto cancellation for pending duplicated requests.\n   */\n  autoCancellation(enable: boolean): Client {\n    this.enableAutoCancellation = !!enable;\n\n    return this;\n  }\n\n  /**\n   * Cancels single request by its cancellation key.\n   */\n  cancelRequest(cancelKey: string): Client {\n    if (this.cancelControllers[cancelKey]) {\n      this.cancelControllers[cancelKey].abort();\n      delete this.cancelControllers[cancelKey];\n    }\n\n    return this;\n  }\n\n  /**\n   * Cancels all pending requests.\n   */\n  cancelAllRequests(): Client {\n    for (let k in this.cancelControllers) {\n      this.cancelControllers[k].abort();\n    }\n\n    this.cancelControllers = {};\n\n    return this;\n  }\n\n  /**\n   * Sends an api http request.\n   */\n  async send(path: string, reqConfig: { [key: string]: any }): Promise<any> {\n    let config = Object.assign(\n      { method: \"GET\" } as { [key: string]: any },\n      reqConfig\n    );\n\n    // serialize the body if needed and set the correct content type\n    // note1: for FormData body the Content-Type header should be skipped\n    // note2: we are checking the constructor name because FormData is not available natively in node\n    if (config.body && config.body.constructor.name !== \"FormData\") {\n      if (typeof config.body !== \"string\") {\n        config.body = JSON.stringify(config.body);\n      }\n\n      // add the json header (if not already)\n      if (typeof config?.headers?.[\"Content-Type\"] === \"undefined\") {\n        config.headers = Object.assign({}, config.headers, {\n          \"Content-Type\": \"application/json\",\n        });\n      }\n    }\n\n    // add Accept-Language header (if not already)\n    if (typeof config?.headers?.[\"Accept-Language\"] === \"undefined\") {\n      config.headers = Object.assign({}, config.headers, {\n        \"Accept-Language\": this.lang,\n      });\n    }\n\n    // check if Authorization header can be added\n    if (\n      // has stored token\n      this.authStore?.token &&\n      // auth header is not explicitly set\n      typeof config?.headers?.Authorization === \"undefined\"\n    ) {\n      config.headers = Object.assign({}, config.headers, {\n        Authorization: this.authStore.token,\n      });\n    }\n\n    // handle auto cancelation for duplicated pending request\n    if (this.enableAutoCancellation && config.params?.$autoCancel !== false) {\n      const cancelKey =\n        config.params?.$cancelKey || (config.method || \"GET\") + path;\n\n      // cancel previous pending requests\n      this.cancelRequest(cancelKey);\n\n      const controller = new AbortController();\n      this.cancelControllers[cancelKey] = controller;\n      config.signal = controller.signal;\n    }\n    // remove the special cancellation params from the other valid query params\n    delete config.params?.$autoCancel;\n    delete config.params?.$cancelKey;\n\n    // build url + path\n    let url = this.buildUrl(path);\n\n    // serialize the query parameters\n    if (typeof config.params !== \"undefined\") {\n      const query = this.serializeQueryParams(config.params);\n      if (query) {\n        url += (url.includes(\"?\") ? \"&\" : \"?\") + query;\n      }\n      delete config.params;\n    }\n\n    if (this.beforeSend) {\n      config = Object.assign({}, this.beforeSend(url, config));\n    }\n\n    // send the request\n    return fetch(url, config)\n      .then(async (response) => {\n        let data: any = {};\n\n        try {\n          data = await response.json();\n        } catch (_) {\n          // all api responses are expected to return json\n          // with the exception of the realtime event and 204\n        }\n\n        if (this.afterSend) {\n          data = this.afterSend(response, data);\n        }\n\n        if (response.status >= 400) {\n          throw new ClientResponseError({\n            url: response.url,\n            status: response.status,\n            data: data,\n          });\n        }\n\n        return data;\n      })\n      .catch((err) => {\n        // wrap to normalize all errors\n        throw new ClientResponseError(err);\n      });\n  }\n\n  /**\n   * Builds and returns an absolute record file url for the provided filename.\n   */\n  getFileUrl(record: Record, filename: string, queryParams = {}): string {\n    const parts = [];\n    parts.push(\"api\");\n    parts.push(\"files\");\n    parts.push(\n      encodeURIComponent(record.collectionId || record.collectionName)\n    );\n    parts.push(encodeURIComponent(record.id));\n    parts.push(encodeURIComponent(filename));\n\n    let result = this.buildUrl(parts.join(\"/\"));\n\n    if (Object.keys(queryParams).length) {\n      const params = new URLSearchParams(queryParams);\n      result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n    }\n\n    return result;\n  }\n\n  /**\n   * Builds a full client url by safely concatenating the provided path.\n   */\n  buildUrl(path: string): string {\n    let url = this.baseUrl + (this.baseUrl.endsWith(\"/\") ? \"\" : \"/\");\n    if (path) {\n      url += path.startsWith(\"/\") ? path.substring(1) : path;\n    }\n    return url;\n  }\n\n  /**\n   * Serializes the provided query parameters into a query string.\n   */\n  private serializeQueryParams(params: { [key: string]: any }): string {\n    const result: Array<string> = [];\n    for (const key in params) {\n      if (params[key] === null) {\n        // skip null query params\n        continue;\n      }\n\n      const value = params[key];\n      const encodedKey = encodeURIComponent(key);\n\n      if (Array.isArray(value)) {\n        // \"repeat\" array params\n        for (const v of value) {\n          result.push(encodedKey + \"=\" + encodeURIComponent(v));\n        }\n      } else if (value instanceof Date) {\n        result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n      } else if (typeof value !== null && typeof value === \"object\") {\n        result.push(\n          encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value))\n        );\n      } else {\n        result.push(encodedKey + \"=\" + encodeURIComponent(value));\n      }\n    }\n\n    return result.join(\"&\");\n  }\n}\n"],"names":["atobPolyfill","ClientResponseError","_super","errData","_this","this","call","url","status","data","isAbort","originalError","Object","setPrototypeOf","prototype","DOMException","name","message","_a","__extends","toJSON","__assign","Error","fieldContentRegExp","cookieSerialize","val","options","opt","assign","encode","defaultEncode","test","TypeError","value","result","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","toString","Date","isDate","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","defaultDecode","indexOf","decodeURIComponent","encodeURIComponent","getTokenPayload","token","encodedPayload","split","map","c","charCodeAt","slice","join","JSON","parse","e","atob","input","str","String","replace","length","bs","buffer","bc","idx","output","charAt","fromCharCode","BaseModel","load","_i","entries","_b","key","id","created","updated","defineProperty","get","clone","constructor","stringify","export","Record","collectionId","collectionName","expand","Admin","avatar","email","defaultCookieKey","LocalAuthStore","storageKey","storageFallback","_storageGet","model","save","_storageSet","clear","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","expirationThreshold","payload","keys","exp","now","isTokenExpired","triggerChange","loadFromCookie","cookie","rawData","decode","index","eqIdx","endIdx","lastIndexOf","trim","undefined","_","cookieParse","Array","isArray","exportToCookie","defaultOptions","resultLength","Blob","size","_c","username","verified","onChange","callback","fireImmediately","push","i","splice","ListResult","page","perPage","totalItems","totalPages","items","BaseService","client","BaseCrudService","_getFullList","basePath","batchSize","queryParams","request","__awaiter","_getList","then","list","castedList","concat","send","method","params","responseData","item","_getOne","_getFirstListItem","filter","$cancelKey","code","_create","bodyParams","body","_update","_delete","CrudService","getFullList","batch","baseCrudPath","getList","getFirstListItem","getOne","create","update","delete","SchemaField","type","system","required","unique","ViewService","listRule","sql","schema","field","ExternalAuth","recordId","provider","providerId","Collection","viewRule","createRule","updateRule","deleteRule","ViewRecord","LogRequest","remoteIp","ip","auth","userIp","referer","userAgent","meta","Views","getRecordsFullList","viewName","getRecordsList","console","log","ViewRecordListResult","SettingsService","getAll","testS3","testEmail","toEmail","emailTemplate","template","AdminService","authStore","success","authResponse","admin","authWithPassword","password","identity","headers","Authorization","bind","authRefresh","requestPasswordReset","confirmPasswordReset","passwordResetToken","passwordConfirm","RecordService","collectionIdOrName","baseCollectionPath","subscribeOne","warn","realtime","subscribe","topicOrCallback","topic","unsubscribe","unsubscribeByPrefix","record","listAuthMethods","usernamePassword","emailPassword","authProviders","usernameOrEmail","authWithOAuth2","codeVerifier","redirectUrl","createData","requestVerification","confirmVerification","verificationToken","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","responseData_1","unlinkExternalAuth","CollectionService","import","collections","deleteMissing","LogService","getRequestsList","getRequest","getRequestsStats","RealtimeService","apply","arguments","clientId","eventSource","subscriptions","listener","msgEvent","connect","submitSubscriptions","sent","addEventListener","unsubscribeByTopicAndListener","hasSubscriptionListeners","removeEventListener","disconnect","topicPrefix","hasAtleastOneTopic","startsWith","exist","topicToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionTopics","catch","err","removeAllSubscriptionListeners","connectHandler","lastEventId","EventSource","buildUrl","close","Client","baseUrl","lang","cancelControllers","recordServices","enableAutoCancellation","views","admins","logs","settings","collection","idOrName","autoCancellation","enable","cancelRequest","cancelKey","abort","cancelAllRequests","k","reqConfig","config","_d","_e","$autoCancel","_f","controller","AbortController","signal","_g","_h","query","serializeQueryParams","includes","beforeSend","fetch","response","json","afterSend","getFileUrl","filename","parts","URLSearchParams","endsWith","substring","encodedKey","value_1","v","toISOString"],"mappings":"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"}