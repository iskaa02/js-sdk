{"version":3,"file":"pocketbase.umd.js","sources":["../src/ClientResponseError.ts","../src/stores/utils/jwt.ts","../src/stores/utils/cookie.ts","../src/models/utils/BaseModel.ts","../src/models/Record.ts","../src/models/Admin.ts","../src/stores/BaseAuthStore.ts","../src/stores/LocalAuthStore.ts","../src/models/utils/ListResult.ts","../src/services/utils/BaseService.ts","../src/services/utils/BaseCrudService.ts","../src/services/utils/CrudService.ts","../src/models/utils/SchemaField.ts","../src/models/View.ts","../src/models/ExternalAuth.ts","../src/models/Collection.ts","../src/models/ViewRecord.ts","../src/models/LogRequest.ts","../src/services/ViewService.ts","../src/services/SettingsService.ts","../src/services/AdminService.ts","../src/services/RecordService.ts","../src/services/CollectionService.ts","../src/services/LogService.ts","../src/services/RealtimeService.ts","../src/services/HealthService.ts","../src/Client.ts"],"sourcesContent":["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport default class ClientResponseError extends Error {\n    url: string                = '';\n    status: number             = 0;\n    data: {[key: string]: any} = {};\n    isAbort:  boolean          = false;\n    originalError: any         = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (!(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (errData !== null && typeof errData === 'object') {\n            this.url    = typeof errData.url === 'string' ? errData.url : '';\n            this.status = typeof errData.status === 'number' ? errData.status : 0;\n            this.data   = errData.data !== null && typeof errData.data === 'object' ? errData.data : {};\n        }\n\n        if (typeof DOMException !== 'undefined' && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.data?.message;\n        if (!this.message) {\n            if (this.isAbort) {\n                this.message = 'The request was autocancelled. More info you could find in https://github.com/pocketbase/js-sdk#auto-cancellation.';\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\n                this.message = 'Failed to connect to the PocketBase server. Try replacing the SDK url from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).';\n            } else {\n                this.message = 'Something went wrong while processing your request.';\n            }\n        }\n    }\n\n    // Make a POJO's copy of the current error class instance.\n    // @see https://github.com/vuex-orm/vuex-orm/issues/255\n    toJSON () {\n        return { ...this };\n    }\n}\n","let atobPolyfill: Function;\nif (typeof atob === 'function') {\n    atobPolyfill = atob\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n                // and if not first of each 4 characters,\n                // convert the first 8 bits to one ascii character\n                bc++ % 4) ?\n            (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n            0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(atobPolyfill(token.split('.')[1]).split('').map(function (c: string) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(''));\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {\n        }\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || (payload.exp - expirationThreshold) > (Date.now() / 1000))\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions{\n    decode?: (val: string) => string,\n}\n\n/**\n* Parses the given cookie header string into an object\n* The object has the various cookies as keys(names) => values\n*/\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any }  {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== 'string') {\n        return result;\n    }\n\n    const opt    = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf('=', index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(';', index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(';', eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n};\n\nexport interface SerializeOptions{\n    encode?:   (val: string | number | boolean) => string,\n    maxAge?:   number,\n    domain?:   string,\n    path?:     string,\n    expires?:  Date,\n    httpOnly?: boolean,\n    secure?:   boolean,\n    priority?: string,\n    sameSite?: boolean|string,\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(name: string, val: string, options?: SerializeOptions): string {\n    const opt    = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError('argument name is invalid');\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError('argument val is invalid');\n    }\n\n    let result = name + '=' + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError('option maxAge is invalid');\n        }\n\n        result += '; Max-Age=' + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError('option domain is invalid');\n        }\n\n        result += '; Domain=' + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError('option path is invalid');\n        }\n\n        result += '; Path=' + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError('option expires is invalid');\n        }\n\n        result += '; Expires=' + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += '; HttpOnly';\n    }\n\n    if (opt.secure) {\n        result += '; Secure';\n    }\n\n    if (opt.priority) {\n        const priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case 'low':\n                result += '; Priority=Low';\n                break;\n            case 'medium':\n                result += '; Priority=Medium';\n                break;\n            case 'high':\n                result += '; Priority=High';\n                break;\n            default:\n                throw new TypeError('option priority is invalid');\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += '; SameSite=Strict';\n                break;\n            case 'lax':\n                result += '; SameSite=Lax';\n                break;\n            case 'strict':\n                result += '; SameSite=Strict';\n                break;\n            case 'none':\n                result += '; SameSite=None';\n                break;\n            default:\n                throw new TypeError('option sameSite is invalid');\n        }\n    }\n\n    return result;\n};\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf('%') !== -1\n        ? decodeURIComponent(val)\n        : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return (\n        Object.prototype.toString.call(val) === '[object Date]' ||\n        val instanceof Date\n    );\n}\n","export default abstract class BaseModel {\n    [key: string]: any,\n\n    id!:      string;\n    created!: string;\n    updated!: string;\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the current model.\n     */\n    load(data: { [key: string]: any }) {\n        for (const [key, value] of Object.entries(data)) {\n            this[key] = value;\n        }\n\n        // normalize known fields\n        this.id      = typeof data.id      !== 'undefined' ? data.id      : '';\n        this.created = typeof data.created !== 'undefined' ? data.created : '';\n        this.updated = typeof data.updated !== 'undefined' ? data.updated : '';\n    }\n\n    /**\n     * Returns whether the current loaded data represent a stored db record.\n     */\n    get isNew(): boolean {\n        return !this.id;\n    }\n\n    /**\n     * Creates a deep clone of the current model.\n     */\n    clone(): BaseModel {\n        const clone = typeof structuredClone === 'function' ?\n            structuredClone(this) : JSON.parse(JSON.stringify(this));\n\n        return new (this.constructor as any)(clone);\n    }\n\n    /**\n     * Exports all model properties as a new plain object.\n     */\n    export(): { [key: string]: any } {\n        return Object.assign({}, this);\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Record extends BaseModel {\n    collectionId!:   string;\n    collectionName!: string;\n    expand!:         {[key: string]: Record|Array<Record>};\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        // normalize common fields\n        this.collectionId   = typeof data.collectionId   === 'string' ? data.collectionId   : '';\n        this.collectionName = typeof data.collectionName === 'string' ? data.collectionName : '';\n\n        // normalize expand items\n        this.loadExpand(data.expand);\n    }\n\n    /**\n     * Loads the provided expand items and recursively normalizes each\n     * item to a `Record|Array<Record>`.\n     */\n    private loadExpand(expand: { [key: string]: any }) {\n        expand = expand || {};\n        this.expand = {};\n\n        for (const key in expand) {\n            if (Array.isArray(expand[key])) {\n                this.expand[key] = expand[key].map((data: any) => new Record(data || {}));\n            } else {\n                this.expand[key] = new Record(expand[key] || {});\n            }\n        }\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Admin extends BaseModel {\n    avatar!: number;\n    email!:  string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.avatar = typeof data.avatar === 'number' ? data.avatar : 0;\n        this.email  = typeof data.email  === 'string' ? data.email  : '';\n    }\n}\n","import { cookieParse, cookieSerialize, SerializeOptions } from '@/stores/utils/cookie';\nimport { isTokenExpired, getTokenPayload } from '@/stores/utils/jwt';\nimport Record  from '@/models/Record';\nimport Admin from '@/models/Admin';\n\nexport type OnStoreChangeFunc = (token: string, model: Record|Admin|null) => void;\n\nconst defaultCookieKey = 'pb_auth';\n\n/**\n * Base AuthStore class that is intended to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport default abstract class BaseAuthStore {\n    protected baseToken: string = '';\n    protected baseModel: Record|Admin|null = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): Record|Admin|null {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model: Record|Admin|null): void {\n        this.baseToken = token || '';\n\n        // normalize the model instance\n        if (model !== null && typeof model === 'object') {\n            this.baseModel = typeof (model as any).collectionId !== 'undefined' ?\n                new Record(model) : new Admin(model);\n        } else {\n            this.baseModel = null;\n        }\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = '';\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || '')[key] || '';\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== 'object' || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || '', data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure:   true,\n            sameSite: true,\n            httpOnly: true,\n            path:     \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date('1970-01-01');\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            model: this.model?.export() || null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength = typeof Blob !== 'undefined' ?\n            (new Blob([result])).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.model && resultLength > 4096) {\n            rawData.model = {id: rawData?.model?.id, email: rawData?.model?.email};\n            if (this.model instanceof Record) {\n                rawData.model.username     = this.model.username;\n                rawData.model.verified     = this.model.verified;\n                rawData.model.collectionId = this.model.collectionId;\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.model);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i];    // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        }\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n","import BaseAuthStore from '@/stores/BaseAuthStore';\nimport Record        from '@/models/Record';\nimport Admin         from '@/models/Admin';\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport default class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): Record|Admin|null {\n        const data = this._storageGet(this.storageKey) || {};\n\n        if (\n            data === null ||\n            typeof data !== 'object' ||\n            data.model === null ||\n            typeof data.model !== 'object'\n        ) {\n            return null;\n        }\n\n        // admins don't have `collectionId` prop\n        if (typeof data.model?.collectionId === 'undefined') {\n            return new Admin(data.model);\n        }\n\n        return new Record(data.model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model: Record|Admin|null) {\n        this._storageSet(this.storageKey, {\n            'token': token,\n            'model': model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || '';\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) { // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== 'string') {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n}\n","import BaseModel from './BaseModel';\n\nexport default class ListResult<M = BaseModel> {\n    page!:       number;\n    perPage!:    number;\n    totalItems!: number;\n    totalPages!: number;\n    items!:      Array<M>;\n\n    constructor(\n        page: number,\n        perPage: number,\n        totalItems: number,\n        totalPages: number,\n        items: Array<M>,\n    ) {\n        this.page       = page > 0 ? page : 1;\n        this.perPage    = perPage >= 0 ? perPage : 0;\n        this.totalItems = totalItems >= 0 ? totalItems : 0;\n        this.totalPages = totalPages >= 0 ? totalPages : 0;\n        this.items      = items || [];\n    }\n}\n","import Client from '@/Client';\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport default abstract class BaseService {\n    readonly client: Client\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import BaseModel           from '@/models/utils/BaseModel';\nimport ListResult          from '@/models/utils/ListResult';\nimport BaseService         from '@/services/utils/BaseService';\nimport ClientResponseError from '@/ClientResponseError';\nimport {\n    BaseQueryParams,\n    ListQueryParams\n} from '@/services/utils/QueryParams';\n\n// @todo since there is no longer need of SubCrudService consider merging with CrudService in v0.9+\nexport default abstract class BaseCrudService<M extends BaseModel> extends BaseService {\n    /**\n     * Response data decoder.\n     */\n    abstract decode(data: { [key: string]: any }): M\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(basePath: string, batchSize = 100, queryParams: ListQueryParams = {}): Promise<Array<T>> {\n        var result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this._getList(basePath, page, batchSize, queryParams).then((list) => {\n                const castedList = (list as any as ListResult<T>);\n                const items = castedList.items;\n                const totalItems = castedList.totalItems;\n\n                result = result.concat(items);\n\n                if (items.length && totalItems > result.length) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    protected _getList<T = M>(basePath: string, page = 1, perPage = 30, queryParams: ListQueryParams = {}): Promise<ListResult<T>> {\n        queryParams = Object.assign({\n            'page': page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send(basePath, {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<T> = [];\n            if (responseData?.items) {\n                responseData.items = responseData.items || [];\n                for (const item of responseData.items) {\n                    items.push(this.decode(item) as any as T);\n                }\n            }\n\n            return new ListResult<T>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    protected _getOne<T = M>(basePath: string, id: string, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Returns the first found item by a list filter.\n     *\n     * Internally it calls `_getList(basePath, 1, 1, { filter })` and returns its\n     * first item.\n     *\n     * For consistency with `_getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     */\n    protected _getFirstListItem<T = M>(basePath: string, filter: string, queryParams: BaseQueryParams = {}): Promise<T> {\n        queryParams = Object.assign({\n            'filter': filter,\n            '$cancelKey': 'one_by_filter_' + basePath + \"_\" + filter,\n        }, queryParams);\n\n        return this._getList<T>(basePath, 1, 1, queryParams)\n            .then((result) => {\n                if (!result?.items?.length) {\n                    throw new ClientResponseError({\n                        status: 404,\n                        data: {\n                            code: 404,\n                            message: \"The requested resource wasn't found.\",\n                            data: {},\n                        },\n                    });\n                }\n\n                return result.items[0];\n            });\n    }\n\n    /**\n     * Creates a new item.\n     */\n    protected _create<T = M>(basePath: string, bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this.client.send(basePath, {\n            'method': 'POST',\n            'params': queryParams,\n            'body': bodyParams,\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    protected _update<T = M>(basePath: string, id: string, bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body': bodyParams,\n        }).then((responseData: any) => this.decode(responseData) as any as T);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    protected _delete(basePath: string, id: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n","import ListResult      from '@/models/utils/ListResult';\nimport BaseModel       from '@/models/utils/BaseModel';\nimport BaseCrudService from '@/services/utils/BaseCrudService';\nimport {\n    BaseQueryParams,\n    ListQueryParams\n} from '@/services/utils/QueryParams';\n\nexport default abstract class CrudService<M extends BaseModel> extends BaseCrudService<M> {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getFullList<T = M>(batch = 200, queryParams: ListQueryParams = {}): Promise<Array<T>> {\n        return this._getFullList<T>(this.baseCrudPath, batch, queryParams);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getList<T = M>(page = 1, perPage = 30, queryParams: ListQueryParams = {}): Promise<ListResult<T>> {\n        return this._getList<T>(this.baseCrudPath, page, perPage, queryParams);\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter })` and returns the\n     * first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     */\n    getFirstListItem<T = M>(filter: string, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this._getFirstListItem<T>(this.baseCrudPath, filter, queryParams);\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getOne<T = M>(id: string, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this._getOne<T>(this.baseCrudPath, id, queryParams);\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    create<T = M>(bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this._create<T>(this.baseCrudPath, bodyParams, queryParams);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    update<T = M>(id: string, bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return this._update<T>(this.baseCrudPath, id, bodyParams, queryParams);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(id: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return this._delete(this.baseCrudPath, id, queryParams);\n    }\n}\n","export default class SchemaField {\n    id!:       string;\n    name!:     string;\n    type!:     string;\n    system!:   boolean;\n    required!: boolean;\n    unique!:   boolean;\n    options!:  { [key: string]: any };\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the field.\n     */\n    load(data: { [key: string]: any }) {\n        this.id       = typeof data.id !== 'undefined' ? data.id : '';\n        this.name     = typeof data.name !== 'undefined' ? data.name : '';\n        this.type     = typeof data.type !== 'undefined' ? data.type : 'text';\n        this.system   = !!data.system;\n        this.required = !!data.required;\n        this.unique   = !!data.unique;\n        this.options  = typeof data.options === 'object' && data.options !== null ? data.options : {};\n    }\n}\n","import BaseModel   from '@/models/utils/BaseModel';\nimport SchemaField from '@/models/utils/SchemaField';\n\nexport default class View extends BaseModel {\n    name!:       string;\n    schema!:     Array<SchemaField>;\n    listRule!:   null|string;\n    sql!: string\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.name  = typeof data.name === 'string' ? data.name : '';\n\n        // rules\n        this.listRule = typeof data.listRule   === 'string' ? data.listRule   : null;\n\n        // sql \n        this.sql = typeof data.sql === 'string' ? data.sql : '';\n\n        // schema\n        data.schema = Array.isArray(data.schema) ? data.schema : [];\n        this.schema = [];\n        for (let field of data.schema) {\n            this.schema.push(new SchemaField(field));\n        }\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class ExternalAuth extends BaseModel {\n    recordId!:     string;\n    collectionId!: string;\n    provider!:     string;\n    providerId!:   string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.recordId     = typeof data.recordId     === 'string' ? data.recordId     : '';\n        this.collectionId = typeof data.collectionId === 'string' ? data.collectionId : '';\n        this.provider     = typeof data.provider     === 'string' ? data.provider     : '';\n        this.providerId   = typeof data.providerId   === 'string' ? data.providerId   : '';\n    }\n}\n","import BaseModel   from '@/models/utils/BaseModel';\nimport SchemaField from '@/models/utils/SchemaField';\n\nexport default class Collection extends BaseModel {\n    name!:       string;\n    type!:       string;\n    schema!:     Array<SchemaField>;\n    system!:     boolean;\n    listRule!:   null|string;\n    viewRule!:   null|string;\n    createRule!: null|string;\n    updateRule!: null|string;\n    deleteRule!: null|string;\n    options!:    {[key:string]: any};\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.system    = !!data.system;\n        this.name      = typeof data.name    === 'string'    ? data.name    : '';\n        this.type      = typeof data.type    === 'string'    ? data.type    : 'base';\n        this.options   = typeof data.options !== 'undefined' ? data.options : {};\n\n        // rules\n        this.listRule   = typeof data.listRule   === 'string' ? data.listRule   : null;\n        this.viewRule   = typeof data.viewRule   === 'string' ? data.viewRule   : null;\n        this.createRule = typeof data.createRule === 'string' ? data.createRule : null;\n        this.updateRule = typeof data.updateRule === 'string' ? data.updateRule : null;\n        this.deleteRule = typeof data.deleteRule === 'string' ? data.deleteRule : null;\n\n        // schema\n        data.schema = Array.isArray(data.schema) ? data.schema : [];\n        this.schema = [];\n        for (let field of data.schema) {\n            this.schema.push(new SchemaField(field));\n        }\n    }\n\n    /**\n     * Checks if the current model is \"base\" collection.\n     */\n    get isBase(): boolean {\n        return this.type === 'base';\n    }\n\n    /**\n     * Checks if the current model is \"auth\" collection.\n     */\n    get isAuth(): boolean {\n        return this.type === 'auth';\n    }\n\n    /**\n     * Checks if the current model is \"single\" collection.\n     */\n    get isSingle(): boolean {\n        return this.type === 'single';\n    }\n}\n","\nexport default class ViewRecord {\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    [key: string]: any,\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        for (const [key, value] of Object.entries(data)) {\n            this[key] = value;\n        }\n    }\n    clone(): ViewRecord {\n        return new (this.constructor as any)(JSON.parse(JSON.stringify(this)));\n    }\n\n    /**\n     * Exports all model properties as a new plain object.\n     */\n    export(): { [key: string]: any } {\n        return Object.assign({}, this);\n    }\n}\n","import BaseModel from '@/models/utils/BaseModel';\n\nexport default class LogRequest extends BaseModel {\n    url!:       string;\n    method!:    string;\n    status!:    number;\n    auth!:      string;\n    remoteIp!:  string;\n    userIp!:    string;\n    referer!:   string;\n    userAgent!: string;\n    meta!:      { [key: string]: any };\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        // fallback to the ip field for backward compatibility\n        data.remoteIp = data.remoteIp || data.ip;\n\n        this.url       = typeof data.url       === 'string' ? data.url       : '';\n        this.method    = typeof data.method    === 'string' ? data.method    : 'GET';\n        this.status    = typeof data.status    === 'number' ? data.status    : 200;\n        this.auth      = typeof data.auth      === 'string' ? data.auth      : 'guest';\n        this.remoteIp  = typeof data.remoteIp  === 'string' ? data.remoteIp  : '';\n        this.userIp    = typeof data.userIp    === 'string' ? data.userIp    : '';\n        this.referer   = typeof data.referer   === 'string' ? data.referer   : '';\n        this.userAgent = typeof data.userAgent === 'string' ? data.userAgent : '';\n        this.meta      = typeof data.meta === 'object' && data.meta !== null ? data.meta : {};\n    }\n}\n","\nimport CrudService from '@/services/utils/CrudService';\nimport View  from '@/models/View';\nimport { ViewRecord } from '..';\n\nexport default class Views extends CrudService<View> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): View {\n        return new View(data);\n    }\n\n    /**\n     * @inheritdoc */\n\n    get baseCrudPath(): string {\n        return '/api/views';\n    }\n\n    getRecordsFullList(viewName: string, batchSize = 100, queryParams = {}): Promise<Array<ViewRecord>> {\n        const basePath= `${this.baseCrudPath}/${viewName}/records`\n        var result: Array<ViewRecord> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getRecordsList(basePath, page, batchSize, queryParams).then((list) => {\n                console.log(list);\n                \n                const castedList = (list as ViewRecordListResult);\n                const items = castedList.items;\n                const totalItems = castedList.totalItems;\n\n                result = result.concat(items);\n\n                if (items.length && totalItems > result.length) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    getRecordsList(viewName: string, page = 1, perPage = 30, queryParams = {}): Promise<ViewRecordListResult> {\n        const basePath= `${this.baseCrudPath}/${viewName}/records`\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send(basePath, {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<ViewRecord> = [];\n            if (responseData?.items) {\n                responseData.items = responseData.items || [];\n                for (const item of responseData.items) {\n                    items.push(new ViewRecord(item));\n                }\n            }\n\n            return new ViewRecordListResult(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n}\n\n class ViewRecordListResult{\n    page!: number;\n    perPage!: number;\n    totalItems!: number;\n    totalPages!: number;\n    items!: Array<ViewRecord>;\n\n    constructor(\n        page: number,\n        perPage: number,\n        totalItems: number,\n        totalPages: number,\n        items: Array<ViewRecord>,\n    ) {\n        this.page = page > 0 ? page : 1;\n        this.perPage = perPage >= 0 ? perPage : 0;\n        this.totalItems = totalItems >= 0 ? totalItems : 0;\n        this.totalPages = totalPages >= 0 ? totalPages : 0;\n        this.items = items || [];\n    }\n}\n","import BaseService         from '@/services/utils/BaseService';\nimport { BaseQueryParams } from '@/services/utils/QueryParams';\n\nexport default class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     */\n    getAll(queryParams: BaseQueryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Bulk updates app settings.\n     */\n    update(bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Performs a S3 storage connection test.\n     */\n    testS3(queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return this.client.send('/api/settings/test/s3', {\n            'method': 'POST',\n            'params': queryParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     */\n    testEmail(toEmail: string, emailTemplate: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        const bodyParams = {\n            'email':    toEmail,\n            'template': emailTemplate,\n        };\n\n        return this.client.send('/api/settings/test/email', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n}\n","import Admin               from '@/models/Admin';\nimport CrudService         from '@/services/utils/CrudService';\nimport { BaseQueryParams } from '@/services/utils/QueryParams';\n\nexport interface AdminAuthResponse {\n    [key: string]: any;\n\n    token: string;\n    admin: Admin;\n}\n\nexport default class AdminService extends CrudService<Admin> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Admin {\n        return new Admin(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/admins';\n    }\n\n    // ---------------------------------------------------------------\n    // Post update/delete AuthStore sync\n    // ---------------------------------------------------------------\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = Admin>(id: string, bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<T> {\n        return super.update<Admin>(id, bodyParams, queryParams).then((item) => {\n            // update the store state if the updated item id matches with the stored model\n            if (\n                this.client.authStore.model &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' && // is not record auth\n                this.client.authStore.model?.id === item?.id\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return super.delete(id, queryParams).then((success) => {\n            // clear the store state if the deleted item id matches with the stored model\n            if (\n                success &&\n                this.client.authStore.model &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' && // is not record auth\n                this.client.authStore.model?.id === id\n            ) {\n                this.client.authStore.clear();\n            }\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'admin': admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account with its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authWithPassword(\n        email: string,\n        password: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<AdminAuthResponse> {\n        bodyParams = Object.assign({\n            'identity': email,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/auth-with-password', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authRefresh(bodyParams = {}, queryParams: BaseQueryParams = {}): Promise<AdminAuthResponse> {\n        return this.client.send(this.baseCrudPath + '/auth-refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n}\n","import Client              from '@/Client';\nimport Record              from '@/models/Record';\nimport ExternalAuth        from '@/models/ExternalAuth';\nimport ListResult          from '@/models/utils/ListResult';\nimport CrudService         from '@/services/utils/CrudService';\nimport { UnsubscribeFunc } from '@/services/RealtimeService';\nimport {\n    BaseQueryParams,\n    RecordQueryParams,\n    RecordListQueryParams,\n} from '@/services/utils/QueryParams';\n\nexport interface RecordAuthResponse<T = Record> {\n    record: T;\n    token:  string;\n    meta?:  {[key: string]: any};\n}\n\nexport interface AuthProviderInfo {\n    name:                string;\n    state:               string;\n    codeVerifier:        string;\n    codeChallenge:       string;\n    codeChallengeMethod: string;\n    authUrl:             string;\n}\n\nexport interface AuthMethodsList {\n    usernamePassword: boolean;\n    emailPassword:    boolean;\n    authProviders:    Array<AuthProviderInfo>;\n}\n\nexport interface RecordSubscription<T = Record> {\n    action: string;\n    record: T;\n}\n\nexport default class RecordService extends CrudService<Record> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    decode<T = Record>(data: { [key: string]: any }): T {\n        return new Record(data) as any as T;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + '/records';\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return '/api/collections/' + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * @deprecated Use subscribe(recordId, callback) instead.\n     *\n     * Subscribe to the realtime changes of a single record in the collection.\n     */\n    async subscribeOne<T = Record>(recordId: string, callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc> {\n        console.warn(\"PocketBase: subscribeOne(recordId, callback) is deprecated. Please replace it with subscribe(recordId, callback).\");\n        return this.client.realtime.subscribe(this.collectionIdOrName + \"/\" + recordId, callback);\n    }\n\n    /**\n     * @deprecated This form of subscribe is deprecated. Please use `subscribe(\"*\", callback)`.\n     */\n    async subscribe<T = Record>(callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc>\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = Record>(topic: string, callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc>\n\n    async subscribe<T = Record>(\n        topicOrCallback: string|((data: RecordSubscription<T>) => void),\n        callback?: (data: RecordSubscription<T>) => void\n    ): Promise<UnsubscribeFunc> {\n        if (typeof topicOrCallback === 'function') {\n            console.warn(\"PocketBase: subscribe(callback) is deprecated. Please replace it with subscribe('*', callback).\");\n            return this.client.realtime.subscribe(this.collectionIdOrName, topicOrCallback);\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        if (topicOrCallback === \"\") {\n            throw new Error(\"Missing topic.\");\n        }\n\n        let topic = this.collectionIdOrName;\n        if (topicOrCallback !== \"*\") {\n            topic += ('/' + topicOrCallback);\n        }\n\n        return this.client.realtime.subscribe(topic, callback)\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe wildcard topic\n        if (topic === \"*\") {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName);\n        }\n\n        // unsubscribe recordId topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName + \"/\" + topic);\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    getFullList<T = Record>(batch = 200, queryParams: RecordListQueryParams = {}): Promise<Array<T>> {\n        return super.getFullList<T>(batch, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getList<T = Record>(page = 1, perPage = 30, queryParams: RecordListQueryParams = {}): Promise<ListResult<T>> {\n        return super.getList<T>(page, perPage, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFirstListItem<T = Record>(filter: string, queryParams: RecordListQueryParams = {}): Promise<T> {\n        return super.getFirstListItem<T>(filter, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getOne<T = Record>(id: string, queryParams: RecordQueryParams = {}): Promise<T> {\n        return super.getOne<T>(id, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    create<T = Record>(bodyParams = {}, queryParams: RecordQueryParams = {}): Promise<T> {\n        return super.create<T>(bodyParams, queryParams);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = Record>(id: string, bodyParams = {}, queryParams: RecordQueryParams = {}): Promise<T> {\n        return super.update<Record>(id, bodyParams, queryParams).then((item) => {\n            if (\n                typeof this.client.authStore.model?.collectionId !== 'undefined' && // is record auth\n                this.client.authStore.model?.id === item?.id\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, queryParams: BaseQueryParams = {}): Promise<boolean> {\n        return super.delete(id, queryParams).then((success) => {\n            if (\n                success &&\n                typeof this.client.authStore.model?.collectionId !== 'undefined' && // is record auth\n                this.client.authStore.model?.id === id\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = Record>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token':  responseData?.token || '',\n            'record': record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     */\n    listAuthMethods(queryParams: BaseQueryParams = {}): Promise<AuthMethodsList> {\n        return this.client.send(this.baseCollectionPath + '/auth-methods', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            return Object.assign({}, responseData, {\n                // normalize common fields\n                'usernamePassword': !!responseData?.usernamePassword,\n                'emailPassword':    !!responseData?.emailPassword,\n                'authProviders':    Array.isArray(responseData?.authProviders) ? responseData?.authProviders : [],\n            });\n        });\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     */\n    authWithPassword<T = Record>(\n        usernameOrEmail: string,\n        password: string,\n        bodyParams = {},\n        queryParams: RecordQueryParams = {},\n    ): Promise<RecordAuthResponse<T>> {\n        bodyParams = Object.assign({\n            'identity': usernameOrEmail,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-password', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     */\n    authWithOAuth2<T = Record>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData = {},\n        bodyParams = {},\n        queryParams: RecordQueryParams = {},\n    ): Promise<RecordAuthResponse<T>> {\n        bodyParams = Object.assign({\n            'provider':     provider,\n            'code':         code,\n            'codeVerifier': codeVerifier,\n            'redirectUrl':  redirectUrl,\n            'createData':  createData,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-oauth2', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     */\n    authRefresh<T = Record>(bodyParams = {}, queryParams: RecordQueryParams = {}): Promise<RecordAuthResponse<T>> {\n        return this.client.send(this.baseCollectionPath + '/auth-refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams  = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     */\n    requestVerification(\n        email: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     */\n    confirmVerification(\n        verificationToken: string,\n        bodyParams  = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token': verificationToken,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     */\n    requestEmailChange(\n        newEmail: string,\n        bodyParams = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'newEmail': newEmail,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/request-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     */\n    confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyParams  = {},\n        queryParams: BaseQueryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'token': emailChangeToken,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCollectionPath + '/confirm-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Lists all linked external auth providers for the specified auth record.\n     */\n    listExternalAuths(\n        recordId: string,\n        queryParams: BaseQueryParams = {}\n    ): Promise<Array<ExternalAuth>> {\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => {\n            const items: Array<ExternalAuth> = [];\n\n            if (Array.isArray(responseData)) {\n                for (const item of responseData) {\n                    items.push(new ExternalAuth(item));\n                }\n            }\n\n            return items;\n        });\n    }\n\n    /**\n     * Unlink a single external auth provider from the specified auth record.\n     */\n    unlinkExternalAuth(\n        recordId: string,\n        provider: string,\n        queryParams: BaseQueryParams = {}\n    ): Promise<boolean> {\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths/' + encodeURIComponent(provider), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n","import Collection          from '@/models/Collection';\nimport CrudService         from '@/services/utils/CrudService';\nimport { BaseQueryParams } from '@/services/utils/QueryParams';\n\nexport default class CollectionService extends CrudService<Collection> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Collection {\n        return new Collection(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/collections';\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     */\n    async import(\n        collections: Array<Collection>,\n        deleteMissing: boolean = false,\n        queryParams: BaseQueryParams = {}\n    ): Promise<true> {\n        return this.client.send(this.baseCrudPath + '/import', {\n            'method': 'PUT',\n            'params': queryParams,\n            'body': {\n                'collections':  collections,\n                'deleteMissing': deleteMissing,\n            }\n        }).then(() => true);\n    }\n}\n","import LogRequest  from '@/models/LogRequest';\nimport ListResult  from '@/models/utils/ListResult';\nimport BaseService from '@/services/utils/BaseService';\nimport {\n    BaseQueryParams,\n    ListQueryParams,\n    LogStatsQueryParams,\n} from '@/services/utils/QueryParams';\n\nexport interface HourlyStats {\n    total: number;\n    date:  string;\n}\n\nexport default class LogService extends BaseService {\n    /**\n     * Returns paginated logged requests list.\n     */\n    getRequestsList(page = 1, perPage = 30, queryParams: ListQueryParams = {}): Promise<ListResult<LogRequest>> {\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send('/api/logs/requests', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<LogRequest> = [];\n            if (responseData?.items) {\n                responseData.items = responseData?.items || [];\n                for (const item of responseData.items) {\n                    items.push(new LogRequest(item));\n                }\n            }\n\n            return new ListResult<LogRequest>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns a single logged request by its id.\n     */\n    getRequest(id: string, queryParams: BaseQueryParams = {}): Promise<LogRequest> {\n        return this.client.send('/api/logs/requests/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => new LogRequest(responseData));\n    }\n\n    /**\n     * Returns request logs statistics.\n     */\n    getRequestsStats(queryParams: LogStatsQueryParams = {}): Promise<Array<HourlyStats>> {\n        return this.client.send('/api/logs/requests/stats', {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => responseData);\n    }\n}\n","import BaseService from '@/services/utils/BaseService';\nimport ClientResponseError from '@/ClientResponseError';\n\ninterface promiseCallbacks {\n    resolve: Function\n    reject: Function\n}\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport default class RealtimeService extends BaseService {\n    private clientId: string = \"\";\n    private eventSource: EventSource | null = null;\n    private subscriptions: { [key: string]: Array<EventListener> } = {};\n    private lastSentTopics: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 15000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(topic: string, callback: (data: any) => void): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error('topic must be set.')\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = (e as MessageEvent);\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[topic]) {\n            this.subscriptions[topic] = [];\n        }\n        this.subscriptions[topic].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[topic].length === 1) {\n            // send the updated subscriptions (if it is the first for the topic)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(topic, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        if (!this.hasSubscriptionListeners(topic)) {\n            return; // already unsubscribed\n        }\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all topic listeners\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource?.removeEventListener(topic, listener);\n            }\n            delete this.subscriptions[topic];\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (!this.hasSubscriptionListeners(topic)) {\n            // submit subscriptions change if there are no other active subscriptions related to the topic\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(topicPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let topic in this.subscriptions) {\n            if (!topic.startsWith(topicPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource?.removeEventListener(topic, listener);\n            }\n            delete this.subscriptions[topic];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(topic: string, listener: EventListener): Promise<void> {\n        if (!Array.isArray(this.subscriptions[topic]) || !this.subscriptions[topic].length) {\n            return; // already unsubscribed\n        }\n\n        let exist = false;\n        for (let i = this.subscriptions[topic].length - 1; i >= 0; i--) {\n            if (this.subscriptions[topic][i] !== listener) {\n                continue;\n            }\n\n            exist = true;                           // has at least one matching listener\n            delete this.subscriptions[topic][i];    // removes the function reference\n            this.subscriptions[topic].splice(i, 1); // reindex the array\n            this.eventSource?.removeEventListener(topic, listener);\n        }\n        if (!exist) {\n            return;\n        }\n\n        // remove the topic from the subscriptions list if there are no other listeners\n        if (!this.subscriptions[topic].length) {\n            delete this.subscriptions[topic];\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (!this.hasSubscriptionListeners(topic)) {\n            // submit subscriptions change if there are no other active subscriptions related to the topic\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(topicToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified topic\n        if (topicToCheck) {\n            return !!this.subscriptions[topicToCheck]?.length;\n        }\n\n        // check for at least one non-empty topic\n        for (let topic in this.subscriptions) {\n            if (!!this.subscriptions[topic]?.length) {\n                return true\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentTopics = this.getNonEmptySubscriptionTopics();\n\n        return this.client.send('/api/realtime', {\n            'method': 'POST',\n            'body': {\n                'clientId': this.clientId,\n                'subscriptions': this.lastSentTopics,\n            },\n            'params': {\n                '$cancelKey': \"realtime_\" + this.clientId,\n            },\n        }).catch((err) => {\n            if (err?.isAbort) {\n                return; // silently ignore aborted pending requests\n            }\n            throw err;\n        });\n    }\n\n    private getNonEmptySubscriptionTopics(): Array<string> {\n        const result : Array<string> = [];\n\n        for (let topic in this.subscriptions) {\n            if (this.subscriptions[topic].length) {\n                result.push(topic);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let topic in this.subscriptions) {\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource.addEventListener(topic, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let topic in this.subscriptions) {\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource.removeEventListener(topic, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0)  {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        })\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 15s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildUrl('/api/realtime'))\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(new Error(\"Failed to establish realtime connection.\"));\n        };\n\n        this.eventSource.addEventListener('PB_CONNECT', (e) => {\n            const msgEvent = (e as MessageEvent);\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions()\n            .then(async () => {\n                let retries = 3;\n                while (this.hasUnsentSubscriptions() && retries > 0) {\n                    retries--;\n                    // resubscribe to ensure that the latest topics are submitted\n                    //\n                    // This is needed because missed topics could happen on reconnect\n                    // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                    // was made before the submit was able to complete.\n                    await this.submitSubscriptions();\n                }\n            }).then(() => {\n                for (let p of this.pendingConnects) {\n                    p.resolve();\n                }\n\n                // reset connect meta\n                this.pendingConnects = [];\n                this.reconnectAttempts = 0;\n                clearTimeout(this.reconnectTimeoutId);\n                clearTimeout(this.connectTimeoutId);\n            }).catch((err) => {\n                this.clientId = \"\";\n                this.connectErrorHandler(err);\n            });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionTopics();\n        if (latestTopics.length != this.lastSentTopics.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentTopics.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout = this.predefinedReconnectIntervals[this.reconnectAttempts] || this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length - 1];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // reject any remaining connect promises\n            const err = new ClientResponseError(new Error(\"Realtime disconnected.\"));\n            for (let p of this.pendingConnects) {\n                p.reject(err);\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n","import BaseService         from '@/services/utils/BaseService';\nimport { BaseQueryParams } from '@/services/utils/QueryParams';\n\nexport interface healthCheckResponse {\n    code:    number;\n    message: string;\n}\n\nexport default class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     */\n    check(queryParams: BaseQueryParams = {}): Promise<healthCheckResponse> {\n        return this.client.send('/api/health', {\n            'method': 'GET',\n            'params': queryParams,\n        });\n    }\n}\n","import ClientResponseError from '@/ClientResponseError';\nimport BaseAuthStore       from '@/stores/BaseAuthStore';\nimport LocalAuthStore      from '@/stores/LocalAuthStore';\nimport ViewService               from './services/ViewService';\nimport SettingsService     from '@/services/SettingsService';\nimport AdminService        from '@/services/AdminService';\nimport RecordService       from '@/services/RecordService';\nimport CollectionService   from '@/services/CollectionService';\nimport LogService          from '@/services/LogService';\nimport RealtimeService     from '@/services/RealtimeService';\nimport HealthService       from '@/services/HealthService';\nimport Record              from '@/models/Record';\nimport { FileQueryParams } from '@/services/utils/QueryParams';\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect/modify the request config.\n     *\n     * Returns the new modified config that will be used to send the request.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, reqConfig) {\n     *     reqConfig.headers = Object.assign({}, reqConfig.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return reqConfig;\n     * };\n     * ```\n     */\n    beforeSend?: (url: string, reqConfig: { [key: string]: any }) => { [key: string]: any };\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             data:     data,\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: (response: Response, data: any) => any;\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Admin APIs**.\n     */\n    readonly admins: AdminService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    readonly views: ViewService;\n\n    /**\n     * An instance of the service that handles the **Record APIs**.\n     */\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(\n        baseUrl = '/',\n        authStore?: BaseAuthStore | null,\n        lang = 'en-US',\n    ) {\n        this.baseUrl   = baseUrl;\n        this.lang      = lang;\n        this.authStore = authStore || new LocalAuthStore();\n\n        // services\n        this.views = new ViewService(this);\n        this.admins      = new AdminService(this);\n        this.collections = new CollectionService(this);\n        this.logs        = new LogService(this);\n        this.settings    = new SettingsService(this);\n        this.realtime    = new RealtimeService(this);\n        this.health      = new HealthService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     *\n     * @param  {string} idOrName\n     * @return {RecordService}\n     */\n    collection(idOrName: string): RecordService {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(cancelKey: string): Client {\n        if (this.cancelControllers[cancelKey]) {\n            this.cancelControllers[cancelKey].abort();\n            delete this.cancelControllers[cancelKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Sends an api http request.\n     */\n    async send(path: string, reqConfig: { [key: string]: any }): Promise<any> {\n        let config = Object.assign({ method: 'GET' } as { [key: string]: any }, reqConfig);\n\n        // serialize the body if needed and set the correct content type\n        // note1: for FormData body the Content-Type header should be skipped\n        // note2: we are checking the constructor name because FormData is not available natively in node\n        if (config.body && config.body.constructor.name !== 'FormData') {\n            if (typeof config.body !== 'string') {\n                config.body = JSON.stringify(config.body);\n            }\n\n            // add the json header (if not already)\n            if (typeof config?.headers?.['Content-Type'] === 'undefined') {\n                config.headers = Object.assign({}, config.headers, {\n                    'Content-Type': 'application/json',\n                });\n            }\n        }\n\n        // add Accept-Language header (if not already)\n        if (typeof config?.headers?.['Accept-Language'] === 'undefined') {\n            config.headers = Object.assign({}, config.headers, {\n                'Accept-Language': this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has stored token\n            this.authStore?.token &&\n            // auth header is not explicitly set\n            (typeof config?.headers?.Authorization === 'undefined')\n        ) {\n            config.headers = Object.assign({}, config.headers, {\n                'Authorization': this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && config.params?.$autoCancel !== false) {\n            const cancelKey = config.params?.$cancelKey || ((config.method || 'GET') + path);\n\n            // cancel previous pending requests\n            this.cancelRequest(cancelKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[cancelKey] = controller;\n            config.signal = controller.signal;\n        }\n        // remove the special cancellation params from the other valid query params\n        delete config.params?.$autoCancel;\n        delete config.params?.$cancelKey;\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        // serialize the query parameters\n        if (typeof config.params !== 'undefined') {\n            const query = this.serializeQueryParams(config.params)\n            if (query) {\n                url += (url.includes('?') ? '&' : '?') + query;\n            }\n            delete config.params;\n        }\n\n        if (this.beforeSend) {\n            config = Object.assign({}, this.beforeSend(url, config));\n        }\n\n        // send the request\n        return fetch(url, config)\n            .then(async (response) => {\n                let data : any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = this.afterSend(response, data);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url:      response.url,\n                        status:   response.status,\n                        data:     data,\n                    });\n                }\n\n                return data;\n            }).catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getFileUrl(record: Record, filename: string, queryParams: FileQueryParams = {}): string {\n        const parts = [];\n        parts.push(\"api\")\n        parts.push(\"files\")\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName))\n        parts.push(encodeURIComponent(record.id))\n        parts.push(encodeURIComponent(filename))\n\n        let result = this.buildUrl(parts.join('/'));\n\n        if (Object.keys(queryParams).length) {\n            const params = new URLSearchParams(queryParams);\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl + (this.baseUrl.endsWith('/') ? '' : '/');\n        if (path) {\n            url += (path.startsWith('/') ? path.substring(1) : path);\n        }\n        return url;\n    }\n\n    /**\n     * Serializes the provided query parameters into a query string.\n     */\n    private serializeQueryParams(params: {[key: string]: any}): string {\n        const result: Array<string> = [];\n        for (const key in params) {\n            if (params[key] === null) {\n                // skip null query params\n                continue;\n            }\n\n            const value = params[key];\n            const encodedKey = encodeURIComponent(key);\n\n            if (Array.isArray(value)) {\n                // \"repeat\" array params\n                for (const v of value) {\n                    result.push(encodedKey + \"=\" + encodeURIComponent(v));\n                }\n            } else if (value instanceof Date) {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n            } else if (typeof value !== null && typeof value === 'object') {\n                result.push(encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value)));\n            } else {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value));\n            }\n        }\n\n        return result.join('&');\n    }\n}\n"],"names":["atobPolyfill","ClientResponseError","_super","errData","_this","this","call","url","status","data","isAbort","originalError","Object","setPrototypeOf","prototype","DOMException","name","message","_a","_d","_c","_b","cause","includes","__extends","toJSON","__assign","Error","fieldContentRegExp","cookieSerialize","val","options","opt","assign","encode","defaultEncode","test","TypeError","value","result","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","toString","Date","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","defaultDecode","indexOf","decodeURIComponent","encodeURIComponent","getTokenPayload","token","encodedPayload","split","map","c","charCodeAt","slice","join","JSON","parse","e","atob","input","str","String","replace","length","bs","buffer","bc","idx","output","charAt","fromCharCode","BaseModel","load","_i","entries","key","id","created","updated","defineProperty","get","clone","structuredClone","stringify","constructor","export","Record","collectionId","collectionName","loadExpand","expand","Array","isArray","Admin","avatar","email","defaultCookieKey","LocalAuthStore","storageKey","storageFallback","_storageGet","model","save","_storageSet","clear","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","isTokenExpired","expirationThreshold","payload","keys","exp","now","triggerChange","loadFromCookie","cookie","rawData","cookieParse","decode","index","eqIdx","endIdx","lastIndexOf","trim","undefined","_","exportToCookie","defaultOptions","resultLength","Blob","size","username","verified","onChange","callback","fireImmediately","push","i","splice","ListResult","page","perPage","totalItems","totalPages","items","BaseService","client","BaseCrudService","_getFullList","basePath","batchSize","queryParams","request","__awaiter","_getList","then","list","castedList","concat","send","method","params","responseData","item","_getOne","_getFirstListItem","filter","$cancelKey","code","_create","bodyParams","body","_update","_delete","CrudService","getFullList","batch","baseCrudPath","getList","getFirstListItem","getOne","create","update","delete","SchemaField","type","system","required","unique","View","listRule","sql","schema","field","ExternalAuth","recordId","provider","providerId","Collection","viewRule","createRule","updateRule","deleteRule","ViewRecord","LogRequest","remoteIp","ip","auth","userIp","referer","userAgent","meta","Views","getRecordsFullList","viewName","getRecordsList","console","log","ViewRecordListResult","SettingsService","getAll","testS3","testEmail","toEmail","emailTemplate","template","AdminService","authStore","success","authResponse","admin","authWithPassword","password","identity","bind","authRefresh","requestPasswordReset","confirmPasswordReset","passwordResetToken","passwordConfirm","RecordService","collectionIdOrName","baseCollectionPath","subscribeOne","warn","realtime","subscribe","topicOrCallback","topic","unsubscribe","unsubscribeByPrefix","record","listAuthMethods","usernamePassword","emailPassword","authProviders","usernameOrEmail","authWithOAuth2","codeVerifier","redirectUrl","createData","requestVerification","confirmVerification","verificationToken","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","responseData_1","unlinkExternalAuth","CollectionService","import","collections","deleteMissing","LogService","getRequestsList","getRequest","getRequestsStats","RealtimeService","apply","arguments","clientId","eventSource","subscriptions","lastSentTopics","maxConnectTimeout","reconnectAttempts","maxReconnectAttempts","Infinity","predefinedReconnectIntervals","pendingConnects","listener","msgEvent","isConnected","connect","sent","submitSubscriptions","addEventListener","unsubscribeByTopicAndListener","hasSubscriptionListeners","removeEventListener","disconnect","topicPrefix","hasAtleastOneTopic","startsWith","exist","topicToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionTopics","catch","err","removeAllSubscriptionListeners","Promise","resolve","reject","initConnect","clearTimeout","connectTimeoutId","setTimeout","connectErrorHandler","EventSource","buildUrl","onerror","lastEventId","retries","hasUnsentSubscriptions","reconnectTimeoutId","latestTopics","latestTopics_1","t","timeout","fromReconnect","close","HealthService","check","Client","baseUrl","lang","cancelControllers","recordServices","enableAutoCancellation","views","ViewService","admins","logs","settings","health","collection","idOrName","autoCancellation","enable","cancelRequest","cancelKey","abort","cancelAllRequests","k","reqConfig","config","headers","Authorization","_e","$autoCancel","_f","controller","AbortController","signal","_g","_h","query","serializeQueryParams","beforeSend","fetch","response","json","afterSend","getFileUrl","filename","parts","URLSearchParams","endsWith","substring","encodedKey","value_1","v","toISOString"],"mappings":"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"}